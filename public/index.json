[{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0). 为什么不支持早期版本的 Hugo?\r\r由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本.\r\r 推荐使用 Hugo extended 版本\r\r由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验.\r\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt. 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意\r\r在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题.\r\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意\r\r默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数.\r\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览基本配置下的预览 \"\r基本配置下的预览\r 技巧\r\r当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新.\r\r 注意\r\r由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender \r\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧\r\r网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify, Github pages, Render 以及更多…\r\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : baseURL = \"http://example.org/\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" # 网站标题 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 [\"en\", \"zh-CN\", \"fr\", \"pl\", ...] languageCode = \"zh-CN\" # 语言名称 [\"English\", \"简体中文\", \"Français\", \"Polski\", ...] languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true # 默认每页列表显示的文章数目 paginate = 12 # 谷歌分析代号 [UA-XXXXXXXX-X] googleAnalytics = \"\" # 版权描述，仅仅用于 SEO copyright = \"\" # 是否使用 robots.txt enableRobotsTXT = true # 是否使用 git 信息 enableGitInfo = true # 是否使用 emoji 代码 enableEmoji = true # 忽略一些构建错误 ignoreErrors = [\"error-remote-getjson\", \"error-missing-instagram-accesstoken\"] # 作者配置 [author] name = \"xxxx\" email = \"\" link = \"\" # 菜单配置 [menu] [[menu.main]] weight = 1 identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" [[menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [params] # 网站默认主题样式 [\"auto\", \"light\", \"dark\"] defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # [\"sha256\", \"sha384\", \"sha512\", \"md5\"] fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站标题, 用于 Open Graph 和 Twitter Cards title = \"我的网站\" # 网站描述, 用于 RSS, SEO, Open Graph 和 Twitter Cards description = \"这是我的全新 Hugo 网站\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 [\"fixed\", \"normal\", \"auto\"] desktopMode = \"fixed\" # 移动端导航栏模式 [\"fixed\", \"normal\", \"auto\"] mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"我的网站\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 (允许 HTML 格式) subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtu","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意\r\rHugo extended 版本对于自定义样式是必需的.\r\r 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换语言切换 \"\r语言切换\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 繁體中文 zh-tw zh-TW 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi 阿拉伯语 ar ar 加泰罗尼亚语 ca ca 泰语 th th 泰卢固语 te te 印尼语 id id 土耳其语 tr tr 韩语 ko ko 印地语 hi hi ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # 设置默认的语言 [\"en\", \"zh-cn\", \"fr\", \"pl\", ...] defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" [[languages.en.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" [[languages.en.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" languageCode = \"zh-CN\" languageName = \"简体中文\" hasCJKLanguage = true [[languages.zh-cn.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" [[languages.zh-cn.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] weight = 1 identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" [[languages.fr.menu.main]] weight = 2 identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" [[languages.fr.menu.main]] weight = 3 identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意\r\r请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容.\r\r 技巧\r\r也可以使用 文章前置参数 来翻译网址.\r\r ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia, LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 [\"lunr\", \"algolia\"] type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎?\r\r以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. \r\r 关于 algolia 的使用技巧\r\r你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. 官方提供的 Algolia CLI 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json…\r\r","date":"2020-03-06","objectID":"/2020/03/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/2020/03/theme-documentation-basics/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用\r\r 有三种方法来引用图片和音乐等本地资源: 使用页面包中的页面资源. 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理会在未来的版本中得到支持. 非常酷的功能! \r\r ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意\r\r不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做.\r\r 这是一个前置参数例子: ---title:\"我的第一篇文章\"subtitle:\"\"date:2020-03-04T15:58:26+08:00lastmod:2020-03-04T15:58:26+08:00draft:trueauthor:\"\"authorLink:\"\"description:\"\"license:\"\"images:[]tags:[]categories:[]featuredImage:\"\"featuredImagePreview:\"\"hiddenFromHomePage:falsehiddenFromSearch:falsetwemoji:falselightgallery:trueruby:truefraction:truefontawesome:truelinkToMarkdown:truerssFullText:falsetoc:enable:trueauto:truecode:copy:truemaxShownLines:50math:enable:false# ...mapbox:# ...share:enable:true# ...comment:enable:true# ...library:css:# someCSS = \"some.css\"# 位于 \"assets/\"# 或者# someCSS = \"https://cdn.example.com/some.css\"js:# someJS = \"some.js\"# 位于 \"assets/\"# 或者# someJS = \"https://cdn.example.com/some.js\"seo:images:[]# ...--- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法. fraction: 如果设为 true, 这篇文章会使用 分数扩展语法. fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法. linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧\r\r featuredImage 和 featuredImagePreview 支持本地资源引用的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources:- name:featured-imagesrc:featured-image.jpg- name:featured-image-previewsrc:featured-image-preview.jpg \r\r ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"3 内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览文章摘要预览 \"\r文章摘要预览\r ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意\r\r请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格.\r\r ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意\r\r不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等.\r\r ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"数学公式 LoveIt 基于 $\\KaTeX$ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. $\\KaTeX$ 根据 特定的分隔符 来自动渲染公式. 技巧\r\r有一份 $\\KaTeX$ 中支持的 $\\TeX$ 函数 清单.\r\r 注意\r\r由于 Hugo 在渲染 Markdown 文档时会根据 _/*/\u003e\u003e 之类的语法生成 HTML 文档, 并且有些转义字符形式的文本内容 (如 \\(/\\)/\\[/\\]/\\\\) 会自动进行转义处理, 因此需要对这些地方进行额外的转义字符表达来实现自动渲染: _ -\u003e \\_ * -\u003e \\* \u003e\u003e -\u003e \\\u003e\u003e \\( -\u003e \\\\( \\) -\u003e \\\\) \\[ -\u003e \\\\[ \\] -\u003e \\\\] \\\\ -\u003e \\\\\\\\ LoveIt 主题支持 raw shortcode 以避免这些转义字符, 它可以帮助您编写原始数学公式内容. 一个 raw 示例: 行内公式: {{\u003c raw \u003e}}\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} 公式块: {{\u003c raw \u003e}} \\[ a=b+c \\\\ d+e=f \\] {{\u003c /raw \u003e}} 呈现的输出效果如下: 行内公式: 公式块: \r\r 行内公式 默认的行内公式分割符有: $ ... $ \\( ... \\) (转义的: \\\\( ... \\\\)) 例如: $c =\\pm\\sqrt{a^2+b^2}$ 和 \\\\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\\\) 呈现的输出效果如下: $c = \\pm\\sqrt{a^2 + b^2}$ 和 \\(f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi\\) 公式块 默认的公式块分割符有: $$ ... $$ \\[ ... \\] (转义的: \\\\[ ... \\\\]) \\begin{equation} ... \\end{equation} (不编号的: \\begin{equation*} ... \\end{equation*}) \\begin{align} ... \\end{align} (不编号的: \\begin{align*} ... \\end{align*}) \\begin{alignat} ... \\end{alignat} (不编号的: \\begin{alignat*} ... \\end{alignat*}) \\begin{gather} ... \\end{gather} (不编号的: \\begin{gather*} ... \\end{gather*}) \\begin{CD} ... \\end{CD} 例如: $$c =\\pm\\sqrt{a^2+b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}\\_{i}=\\mathbf{E}\\_{1}+\\mathbf{E}\\_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\\\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\\\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\\\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\\\u003e\u003e B \\\\\\\\ @VbVV @AAcA \\\\\\\\ C @= D \\end{CD} 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] \\begin{equation*} \\rho \\frac{\\mathrm{D} \\mathbf{v}}{\\mathrm{D} t}=\\nabla \\cdot \\mathbb{P}+\\rho \\mathbf{f} \\end{equation*} \\begin{equation} \\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots \\end{equation} \\begin{align} a\u0026=b+c \\\\ d+e\u0026=f \\end{align} \\begin{alignat}{2} 10\u0026x+\u00263\u0026y = 2 \\\\ 3\u0026x+\u002613\u0026y = 4 \\end{alignat} \\begin{gather} a=b \\\\ e=b+c \\end{gather} \\begin{CD} A @\u003ea\u003e\u003e B \\\\ @VbVV @AAcA \\\\ C @= D \\end{CD} 技巧\r\r你可以在 网站配置 中自定义行内公式和公式块的分割符.\r\r Copy-tex Copy-tex 是一个 $\\KaTeX$ 的插件. 通过这个扩展, 在选择并复制 $\\KaTeX$ 渲染的公式时, 会将其 $\\LaTeX$ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 $\\LaTeX$ 源代码. mhchem mhchem 是一个 $\\KaTeX$ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 😂 技巧\r\r这个方法可以间接解决一个还未解决的 Hugo 的 issue.\r\r 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link. ","date":"2020-03-05","objectID":"/2020/03/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/2020/03/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes. shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 呈现的输出效果如下: Lighthouse (figure) 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist gist 的文档 一个 gist 示例: {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram instagram 的文档 Instagram’s API was deprecated since October 24th, 2020\r\rThe instagram-shortcode refers an endpoint of Instagram’s API, that’s deprecated since October 24th, 2020. Thus, no images can be fetched from this API endpoint, resulting in an error when the instagram-shortcode is used. For more information please have a look at GitHub issue #7879.\r\r ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param param 的文档 一个 param 示例: {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref 和 relref ref 和 relref 的文档 ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet tweet 的文档 一个 tweet 示例: {{\u003c tweet 917359331535966209 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube youtube 的文档 一个 youtube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/2020/03/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/2020/03/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style 注意\r\rHugo extended 版本对于 style shortcode 是必需的.\r\r style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightGallery 两个依赖库. 支持本地资源引用的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image)\"\rLighthouse (image)\r ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意\r\r一个 注意 横幅\r\r 摘要\r\r一个 摘要 横幅\r\r 信息\r\r一个 信息 横幅\r\r 技巧\r\r一个 技巧 横幅\r\r 成功\r\r一个 成功 横幅\r\r 问题\r\r一个 问题 横幅\r\r 警告\r\r一个 警告 横幅\r\r 失败\r\r一个 失败 横幅\r\r 危险\r\r一个 危险 横幅\r\r Bug\r\r一个 Bug 横幅\r\r 示例\r\r一个 示例 横幅\r\r 引用\r\r一个 引用 横幅\r\r admonition shortcode 有以下命名参数: type [可选] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip\r\r一个 技巧 横幅\r\r ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能. 完整文档请查看页面 主题文档 - mermaid Shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts echarts shortcode 使用 ECharts 库提供数据可视化的功能. 完整文档请查看页面 主题文档 - echarts Shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能. 完整文档请查看页面 主题文档 - mapbox Shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器. 完整文档请查看页面 主题文档 - music Shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 完整文档请查看页面 主题文档 - bilibili Shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit typeit shortcode 基于 TypeIt 库提供了打字动画. 完整文档请查看页面 主题文档 - typeit Shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意\r\r脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库.\r\r 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"12 raw raw shortcode 用来在你的文章中插入原始  HTML 内容. 一个 raw 示例: 行内公式: {{\u003c raw \u003e}}\\(\\mathbf{E}=\\sum_{i} \\mathbf{E}_{i}=\\mathbf{E}_{1}+\\mathbf{E}_{2}+\\mathbf{E}_{3}+\\cdots\\){{\u003c /raw \u003e}} 公式块: {{\u003c raw \u003e}} \\[ a=b+c \\\\ d+e=f \\] {{\u003c /raw \u003e}} 原始的带有 Markdown 语法的内容: {{\u003c raw \u003e}}**Hello**{{\u003c /raw \u003e}} 呈现的输出效果如下: 行内公式: 公式块: 原始的带有 Markdown 语法的内容: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:12:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"13 person person shortcode 用来在你的文章中以 h-card 的格式插入个人网站链接. person shortcode 有以下命名参数: url [必需] (第一个位置参数) URL of the personal page. name [必需] (第二个位置参数) Name of the person. text [可选] (第三个位置参数) Text to display as hover tooltip of the link. picture [可选] (第四个位置参数) A picture to use as person’s avatar. nick [可选] Nickame of the person. 一个 person 示例: {{\u003c person url=\"https://evgenykuznetsov.org\" name=\"Evgeny Kuznetsov\" nick=\"nekr0z\" text=\"author of this shortcode\" picture=\"https://evgenykuznetsov.org/img/avatar.jpg\" \u003e}} 呈现的输出效果为  Evgeny Kuznetsov (nekr0z). 一个使用通用图标的 person 示例: {{\u003c person \"https://dillonzq.com/\" Dillon \"author of the LoveIt theme\" \u003e}} 呈现的输出效果为  Dillon. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-extended-shortcodes/:13:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/2020/03/theme-documentation-extended-shortcodes/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意\r\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. \r\r 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r\r 将此页保存为书签，以备将来参考!\r\r ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID\r\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e \r\r ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧\r\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem \r\r ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\r\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r\r ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐\r\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. \r\r ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意\r\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r\r ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \"\rThe Stormtroopocat\r 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \"\rThe Dojocat\r 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧\r\rLoveIt 主题提供了一个包含更多功能的 图片的 shortcode.\r\r 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/2019/12/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/2019/12/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意\r\r这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. \r\r 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧\r\r 将此页保存为书签，以备将来参考!\r\r ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID\r\r要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e \r\r ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧\r\r如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem \r\r ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments\rline 1 of code\rline 2 of code\rline 3 of code\r 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意\r\rHugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode.\r\r ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐\r\r在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. \r\r ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意\r\r定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了.\r\r ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The StormtroopocatAlt text \"\rThe Stormtroopocat\r 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The DojocatAlt text \"\rThe Dojocat\r 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧\r\rLoveIt 主题提供了一个包含更多功能的 图片的 shortcode.\r\r 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"1970-01-01","objectID":"/1970/01/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/1970/01/basic-markdown-syntax/"},{"categories":["documentation"],"content":"mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":" mermaid shortcode 使用 Mermaid 库提供绘制图表和流程图的功能. mermaid 是一个可以帮助你在文章中绘制图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:4:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram-v2 [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:5:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:6:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"实体关系图 一个 实体关系图 mermaid 示例: {{\u003c mermaid \u003e}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:7:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"用户体验旅程图 一个 用户体验旅程图 mermaid 示例: {{\u003c mermaid \u003e}} journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:8:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:9:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["documentation"],"content":"依赖图 一个 依赖图 mermaid 示例: {{\u003c mermaid \u003e}} requirementDiagram requirement test_req { id: 1 text: the test text. risk: high verifymethod: test } element test_entity { type: simulation } test_entity - satisfies -\u003e test_req {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mermaid-shortcode/:10:0","tags":["shortcodes"],"title":"主题文档 - mermaid Shortcode","uri":"/2020/03/theme-documentation-mermaid-shortcode/"},{"categories":["Markdown"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/2019/10/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇‍♂️ bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 👩‍❤️‍👨 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/2019/10/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/2019/10/emoji-support/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-echarts-shortcode/","tags":["shortcodes"],"title":"主题文档 - echarts Shortcode","uri":"/2020/03/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"echarts shortcode 使用 ECharts 库提供数据可视化的功能. ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图, 柱状图, 散点图, 饼图, K线图, 用于统计的 盒形图, 用于地理数据可视化的 地图, 热力图, 线图, 用于关系数据可视化的 关系图, treemap, 旭日图, 多维数据可视化的 平行坐标, 还有用于 BI 的 漏斗图, 仪表盘, 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}}title:text:折线统计图top:2%left:centertooltip:trigger:axislegend:data:- 邮件营销- 联盟广告- 视频广告- 直接访问- 搜索引擎top:10%grid:left:5%right:5%bottom:5%top:20%containLabel:truetoolbox:feature:saveAsImage:title:保存为图片xAxis:type:categoryboundaryGap:falsedata:- 周一- 周二- 周三- 周四- 周五- 周六- 周日yAxis:type:valueseries:- name:邮件营销type:linestack:总量data:- 120- 132- 101- 134- 90- 230- 210- name:联盟广告type:linestack:总量data:- 220- 182- 191- 234- 290- 330- 310- name:视频广告type:linestack:总量data:- 150- 232- 201- 154- 190- 330- 410- name:直接访问type:linestack:总量data:- 320- 332- 301- 334- 390- 330- 320- name:搜索引擎type:linestack:总量data:- 820- 932- 901- 934- 1290- 1330- 1320{{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-echarts-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - echarts Shortcode","uri":"/2020/03/theme-documentation-echarts-shortcode/"},{"categories":["documentation"],"content":"mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mapbox-shortcode/","tags":["shortcodes"],"title":"主题文档 - mapbox Shortcode","uri":"/2020/03/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":" mapbox shortcode 使用 Mapbox GL JS 库提供互动式地图的功能. Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数或者网站配置中设置的值. navigation [可选] 是否添加 NavigationControl, 默认值是前置参数或者网站配置中设置的值. geolocate [可选] 是否添加 GeolocateControl, 默认值是前置参数或者网站配置中设置的值. scale [可选] 是否添加 ScaleControl, 默认值是前置参数或者网站配置中设置的值. fullscreen [可选] 是否添加 FullscreenControl, 默认值是前置参数或者网站配置中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1?optimize=true\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1?optimize=true\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-mapbox-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - mapbox Shortcode","uri":"/2020/03/theme-documentation-mapbox-shortcode/"},{"categories":["documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-music-shortcode/","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/2020/03/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"music shortcode 基于 APlayer 和 MetingJS 库提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-music-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/2020/03/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"1 自定义音乐 URL 支持本地资源引用的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-music-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/2020/03/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-music-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/2020/03/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-music-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/2020/03/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-music-shortcode/:4:0","tags":["shortcodes"],"title":"主题文档 - music Shortcode","uri":"/2020/03/theme-documentation-music-shortcode/"},{"categories":["documentation"],"content":"bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-bilibili-shortcode/","tags":["shortcodes"],"title":"主题文档 - bilibili Shortcode","uri":"/2020/03/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":" bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: \r如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-bilibili-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - bilibili Shortcode","uri":"/2020/03/theme-documentation-bilibili-shortcode/"},{"categories":["documentation"],"content":"typeit shortcode 基于 TypeIt 库提供了打字动画.","date":"2020-03-03","objectID":"/2020/03/theme-documentation-typeit-shortcode/","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/2020/03/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"typeit shortcode 基于 TypeIt 库提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/2020/03/theme-documentation-typeit-shortcode/:0:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/2020/03/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/2020/03/theme-documentation-typeit-shortcode/:1:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/2020/03/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/2020/03/theme-documentation-typeit-shortcode/:2:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/2020/03/theme-documentation-typeit-shortcode/"},{"categories":["documentation"],"content":"3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: \r","date":"2020-03-03","objectID":"/2020/03/theme-documentation-typeit-shortcode/:3:0","tags":["shortcodes"],"title":"主题文档 - typeit Shortcode","uri":"/2020/03/theme-documentation-typeit-shortcode/"},{"categories":["杂谈"],"content":"介绍了新版MicrosoftEdge的一些功能及使用技巧","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["杂谈"],"content":"这篇记录了我为什么在众多浏览器中选择了Microsoft Edge。我将引入新版Edge的部分功能以及个人的使用体验做简单介绍 ","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/:0:0","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["杂谈"],"content":"前言 浏览器作为检索Web信息的重要工具，使用比较广泛的应该是Google的Chrome、Microsoft的Microsoft Edge，Apple的Safari，以及Mozilla 的Firefox 我是重度用户，生活、工作、学习各方面都是离不开的。在摸索Microsoft Edge之前，一直使用的是Chrome ","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/:1:0","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["杂谈"],"content":"为什么将Edge作为主要浏览器 这是我当前的版本信息 \r\r","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/:2:0","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["杂谈"],"content":"旧版Edge 它的前身是IE浏览器，和主流Chrome等相比简直难用的一批。即使后面进行了改版，依旧饱受诟病 2020年微软正式推出与Chrome相同内核Chromium的新版Edge，直接捡现成的，Chromium标准开发的浏览器扩展，这样才逐渐被大家接受，而IE则成为了历史变成了新版Edge的一个内置功能模块——在Edge内使用IE内核重新加载网页 原来大家所接受的并不是Edge而是Chromium😝 ","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/:2:1","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["杂谈"],"content":"新版Edge Edge 可能是最合适的跨平台浏览器，就以目前的版本来讲 替代谷歌账户接入微软账户，支持各类跨平台功能、同步等 非常方便衔接，支持将Chrome上的收藏夹、密码等资料转移到Edge 基本工具，如PDF阅读与编辑、截图等 PDF工具特别好评，支持简单标注，功能需求不大的话不需要额外安装PDF编辑软件 浏览器扩展，兼容所有基于Chromium标准开发的扩展 Chrome上有的，我Edge也有 生产力工具，集锦、垂直选项卡、侧边栏、网页捕获、Drop等 或许New Bing也应有一席之地 整体使用下来，带给我的体验非常棒！ 强大的生产力工具 给我震撼较大的是它提供的各类工具 PDF工具 与其他浏览器一样，Edge可以做为PDF阅读器来使用，不同的是它还可以做标注和涂鸦！这就允许我工作时为一些PDF文件脱去敏感信息而不需要安装额外的PDF编辑器 \r\r \r\r而其他浏览器虽然也提供了PDF阅读的功能，可能是考虑到浏览器主要是作为检索Web信息的工具，附加过多功能会显得臃肿，只支持简单的阅读 可能是之前没有注意到，Chrome现在支持演示功能了。Firefox也开始支持PDF标注了🤣 Web选择 浏览网页内容看到不错的段落想要复制下来，可以右键Web选择，框选相中的内容便可以复制，相当方便 \r\r一些可以点击但不方便复制的链接文字、某些限制复制的网站上的内容也可以用这个办法来解除复制限制 但是经过测试，实际效果并不理想。主流网站的限制复制即便用Web选择复制的也是图片，确实不如经常更新的脚本有效 可以使用浏览器的阅读模式，或者安装脚本或扩展解决 侧栏—Drop Drop功能其实已经上线大半年了，正式版的我也是刚刚才用上 该功能可以帮助用户使用浏览器跨设备共享文件和笔记 \r\r这里我在安卓和电脑用Drop互发消息和图片，都可以正常使用。也可以互传文件 使用Drop功能时，onedrive将会你的空间新建一个Microsoft Edge Drop Files文件夹来存放你在Drop发送的文件或图片。所以上传规则如文件大小、类型可能就关联到Onedrive的剩余空间大小等因素 好在它不要求跨平台必须保证在同一局域网下 正如Drop介绍，Drop 只是与 Microsoft Edge 浏览器协同工作的众多应用和网站之一。作为一个简单的跨平台协同工具，足够我日常使用了 侧栏—工具 在Edge的侧栏还有一个值得称赞的功能 \r\r这个工具箱中目前有三个小工具，翻译、计算器和单位换算，虽然平常用到的地方可能除了翻译，其他两个都是被忽略，但是不排除后期Edge将会纳入更多的小工具。 不过希望不会因此变得臃肿~ New Bing 随着ChatGPT火爆网络，便出现了基于GPT开发的新必应（New Bing） New Bing我大概是在3月中旬注册的，当时按照推特上的一个方法：挂日本节点，开全局代理，使用gmail注册一次就可以成功不需要waitlist。诚不欺我！ 简单体验了一番，确实要比国内手机厂商内置的小爱、小布要智能些。据说已经有人靠它这类AI吃饭了 \r\r根据New Bing自己的回答自己早在2021年就开始工作的答案来看，哪个更早还真不好说😂 之前问过它“是否基于ChatGPT开发”的问题，当时回答的是，现在不承认了，问也不让问😡 \r\r挺好玩的哈哈 \r\r只不过New bing这类AI不对大陆开放，有些可惜 集锦 浏览过程中总会遇到值得记录的精华内容，例如我在写这篇文章时需要引入某位前辈的结语，或者你在写论文时看到值得引用的段落时，这个时候集锦就非常有用了 可以直接添加页面、段落，以及加入自己的文字作为备注 \r\r垂直选项卡 这个就不再赘述了，和之前的标签页方式相比凭个人爱好选择 可以将几个标签页组合在一起进行分组 \r\r使用体验 从日常使用简单做下对比 内存占用 与Chrome一样，Edge也是基于Chromium内核开发，同样开一个标签页的内存占用，Chrome和Microsoft Edge真没的说 两个都是内存杀手… \r\r账户同步、跨平台支持 曾经爱折腾的我也是谷歌粉，一个谷歌账号走天下，即便是使用上遇到了问题也有大把的时间去折腾 但是工作之后就不一样了，只想求安稳~ 谷歌服务在大陆是不可用的，这就意味着不挂梯子的前提下没办法做到账户信息相互同步的 如果每次都需要先挂梯子再去使用，又碰上网络不稳定等因素的阻碍，将会耗费大量的精力 再三权衡下，我把Chrome上能够转移的资料信息都交给了不需要过多折腾、接入微软“生态圈”的MicrosoftEdge。用作我的主力浏览器工具 ","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/:2:2","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["杂谈"],"content":"附加几个小技巧 关闭设置默认浏览器提示 遇到经常弹窗询问是否要将Microsoft Edge设置为默认浏览器，在地址栏输入edge://flags搜索recommendations将其设置为Disabled \r\r开启Drop方法 如果你的电脑端没有Drop，可以进edge://flags搜索drop将这两项开关设置为Enabled \r\r冲浪小游戏 地址栏输入edge://surf开启冲浪！ \r\r开启多线程下载 进edge://flags搜索downloading，并将其设置为Enabled \r","date":"2023-03-23","objectID":"/2023/03/useful-microsoftedge/:3:0","tags":["MicrosoftEdge"],"title":"浏览器，我选择MicrosoftEdge","uri":"/2023/03/useful-microsoftedge/"},{"categories":["Hugo"],"content":"这篇内容记录了我是如何解决由于不小心删掉某些文件后Git无法正常使用的问题。","date":"2022-06-14","objectID":"/2022/06/git-pull-2022-6-14/","tags":["Hugo","Git"],"title":"博客出了问题","uri":"/2022/06/git-pull-2022-6-14/"},{"categories":["Hugo"],"content":"博客长时间未进行维护更新后发生了点小意外，这里记录了该问题的解决过程。 由于这段时间工作比较忙，一直没有精力来更新维护我的博客，落下一段时间后再拿起使用时就遇到了问题 首先是路径下git bash here后敲hugo没有了反应，后面发现hugo的程序文件不知何时被删除了，原来它在D:\\Hugo\\bin下。重新补上后显示command not found，好家伙，环境变量也被清理了，只好再给加上 本以为意外到这里就结束了，在完成一篇后准备push，又提示git command not found，顿时无语 直接从头再来 先将Git重装了一遍 拉取远程文件代码 git https://github.com/biabiabiu/zhengyang_.git ... 查看当前分支情况 $ git branch -al * master remotes/origin/HEAD -\u003e origin/master remotes/origin/master 将本地分支与远程关联同步 $ git pull origin master From https://github.com/biabiabiu/zhengyang_ * branch master -\u003e FETCH_HEAD Already up to date. 查看是否关联成功 $ git remote -v origin https://github.com/biabiabiu/zhengyang_.git (fetch) origin https://github.com/biabiabiu/zhengyang_.git (push) git push 添加一个git_test.txt文件 git add . git commit -m \"git-test\" git push 可以看到git_test.txt文件 \r\r ","date":"2022-06-14","objectID":"/2022/06/git-pull-2022-6-14/:0:0","tags":["Hugo","Git"],"title":"博客出了问题","uri":"/2022/06/git-pull-2022-6-14/"},{"categories":["工作"],"content":"介绍了我是如何在众多项目管理软件中最终选择了SeaTable","date":"2022-06-13","objectID":"/2022/06/project-manage-seatable/","tags":["项目管理","SeaTable"],"title":"使用SeaTable进行项目管理和数据收集统计","uri":"/2022/06/project-manage-seatable/"},{"categories":["工作"],"content":"这篇介绍了我是如何在众多项目管理软件中，最终选择了SeaTable，以及后续的基础使用。 很久没有更新了，倒不是没有精力。坚持对我来说确实不是一件简单的事。 ","date":"2022-06-13","objectID":"/2022/06/project-manage-seatable/:0:0","tags":["项目管理","SeaTable"],"title":"使用SeaTable进行项目管理和数据收集统计","uri":"/2022/06/project-manage-seatable/"},{"categories":["工作"],"content":"前言 去年跳槽至一家小公司，已经过去半年的时间。出于老板对我的的信任和肯定，以及自己也不甘一直处于一线，我担任起了项目经理的职位。当然，更大的原因是公司人手不足。 日常工作，我需要跟进每个项目的进度，并及时与申办方做好对接工作，但是这么多的项目，工作只有我一个来进行，如果没有及时更新数据，可能会影响到公司的正常运营。 另外，所有专员的患者资料也是提交到我这里进行审核上报以及后续的状态跟进，同样不能出岔子。我还需要每周对各个专员的工作情况，患者提交情况做好记录统计，每周进行汇报，这就更不能出错了。 除此之外，公司得其他零零总总的事务多少也会经过我，比如项目报价、项目中心覆盖情况统计、招募计划等各种表，信息零散，事务繁杂，容不得半点马虎大意。没办法，公司缺人手… 因为工作越来越繁杂，为了能保证所有的数据都能准确记录而且不轻易丢失，无论身边是否有电脑都可以及时进行更新，我需要一款软件来协助我，提升工作效率。 ","date":"2022-06-13","objectID":"/2022/06/project-manage-seatable/:1:0","tags":["项目管理","SeaTable"],"title":"使用SeaTable进行项目管理和数据收集统计","uri":"/2022/06/project-manage-seatable/"},{"categories":["工作"],"content":"SeaTable SeaTable - 新一代在线协同表格和数字化平台 它除了支持表格记录管理数据的基本操作外，还增加了在线协同、表单等功能模块，也可以按需选择提供的面向不同行业，不同业务的模板，用其进行项目管理，信息管理的确比较方便。另外也尝试了PingCode、Teambition等优秀的团队协作和项目管理软件，SeaTable是目前最适合我的 主要功能 在线协同共享 信息记录，管理 表单数据收集 工作流(比较适合小团队的运营，任务发布，工作审批等，暂未用到) 支持自动化(暂未用到) 其他 收费标准 SeaTable对个人以及20人以下的小团队免费开放，如果需求量大可以考虑付费，对于小企业来讲还是比较人性化的 \r\r团队免费版 \r\r模板 \r\r其他展示 \r\r \r\r \r\r \r\r 目前已经借助往SeaTable完成了很多工作，例如做统计，汇报，表单收集等，都可以很方便的及时更新以及导出，的确节省了我很多时间与精力，而且也不用再担心表格不小心被删除，数据丢失的情况发生 最后，感谢SeaTable开发团队！ ","date":"2022-06-13","objectID":"/2022/06/project-manage-seatable/:2:0","tags":["项目管理","SeaTable"],"title":"使用SeaTable进行项目管理和数据收集统计","uri":"/2022/06/project-manage-seatable/"},{"categories":["Linux","记录"],"content":"记录了Linux自动禁用笔记本键盘的过程","date":"2022-04-04","objectID":"/2022/04/linux-autodisable-keyboard/","tags":["键盘禁用"],"title":"Linux设置自动禁用键盘","uri":"/2022/04/linux-autodisable-keyboard/"},{"categories":["Linux","记录"],"content":"这篇记录了我为Linux设置自动禁用笔记本键盘的过程。 ","date":"2022-04-04","objectID":"/2022/04/linux-autodisable-keyboard/:0:0","tags":["键盘禁用"],"title":"Linux设置自动禁用键盘","uri":"/2022/04/linux-autodisable-keyboard/"},{"categories":["Linux","记录"],"content":"前言 最近切换到Liunx，感觉非常不错。使用了GNOME、GNOME Shell 扩展来定制桌面 \r\r遇到了同样的问题—键盘禁用，前面有提到windows平台如何禁用笔记本键盘，CMD敲下命令，只要不进行系统更新，键盘可一直保持禁用状态 可Linux不这样，禁用只对本次启动有效，后续重启后都需要再次执行命令，非常麻烦。最好是能有一个禁用脚本，在进入系统时自动执行 ","date":"2022-04-04","objectID":"/2022/04/linux-autodisable-keyboard/:1:0","tags":["键盘禁用"],"title":"Linux设置自动禁用键盘","uri":"/2022/04/linux-autodisable-keyboard/"},{"categories":["Linux","记录"],"content":"键盘禁用 Linux平台，可以用xinput来禁用/启用输入设备 xinput disable \u003cdevice\u003e # 禁用设备 xinput enable \u003cdevice\u003e # 启动设备 这里以Ubuntu为例，当前环境 zhengyang@zhengyangpc:~$ uname -a Linux zhengyangpc 5.13.0-39-generic #44~20.04.1-Ubuntu SMP Thu Mar 24 16:43:35 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux 手动禁用 获取输入设备 zhengyang@zhengyangpc:~$ xinput list ⎡ Virtual core pointer id=2 [master pointer (3)] ⎜ ↳ Virtual core XTEST pointer id=4 [slave pointer (2)] ⎜ ↳ MOSART Semi. Mi Wireless Combo Mouse id=12 [slave pointer (2)] ⎜ ↳ MOSART Semi. Mi Wireless Combo Consumer Control id=13 [slave pointer (2)] ⎜ ↳ 2.4G Mouse id=15 [slave pointer (2)] ⎜ ↳ FocalTechPS/2 FocalTech Touchpad id=19 [slave pointer (2)] ⎣ Virtual core keyboard id=3 [master keyboard (2)] ↳ Virtual core XTEST keyboard id=5 [slave keyboard (3)] ↳ Power Button id=6 [slave keyboard (3)] ↳ Asus Wireless Radio Control id=7 [slave keyboard (3)] ↳ Video Bus id=8 [slave keyboard (3)] ↳ Video Bus id=9 [slave keyboard (3)] ↳ Sleep Button id=10 [slave keyboard (3)] ↳ MOSART Semi. Mi Wireless Combo id=11 [slave keyboard (3)] ↳ MOSART Semi. Mi Wireless Combo System Control id=14 [slave keyboard (3)] ↳ USB2.0 VGA UVC WebCam: USB2.0 V id=16 [slave keyboard (3)] ↳ Asus WMI hotkeys id=17 [slave keyboard (3)] ↳ MOSART Semi. Mi Wireless Combo Consumer Control id=20 [slave keyboard (3)] ↳ AT Translated Set 2 keyboard id=18 [slave keyboard (3)] 在输出中找到需要禁用设备的id，一般笔记本自带键盘为AT Translated Set 2 keyboard。此时的id值为18 注意\r\r这里的id值并不是固定的\r\r 禁用 zhengyang@zhengyangpc:~$ xinput disable 18 默认是没有输出的，此时自带的键盘便失去作用了 使用正则匹配 每次禁用都需要敲两条命令，我希望一条就可以解决 xinput disable `xinput list | grep AT | egrep -o \"id=[0-9]*\" | egrep -o \"[0-9]*\"` 在list中找到有AT的一行 zhengyang@zhengyangpc:~$ xinput list | grep AT ↳ AT Translated Set 2 keyboard id=18 [slave keyboard (3)] 在该行进行正则匹配，egrep默认返回匹配行结果，-o, --only-matching只显示行中非空匹配部分，即只返回匹配内容 zhengyang@zhengyangpc:~$ xinput list | grep AT | egrep -o \"id=[0-9]*\" id=18 再以同样的方式取得id值，最后执行xinput disable id 不足之处 这种方式可以直接禁用，且只对本次开机有效，关机重启后需要再次手动执行 自动禁用 每次开机都要重复执行一次比较麻烦，可以直接在每次进入系统时自动禁用 crontab 一开始打算使用crontab计划任务，在开机时执行脚本文件自动禁用的 zhengyang@zhengyangpc:~/Other$ cat dis_keyboard.sh # !/bin/bash # Disable notebook built-in keyboard. keyboard_id=`xinput list | grep AT | egrep -o \"id=[0-9]*\" | egrep -o \"[0-9]*\"` xinput disable $keyboard_id 在crontab中添加开机执行任务 zhengyang@zhengyangpc:~/Other$ crontab -e ... # Set up to automatically disable the keyboard @reboot root /home/zhengyang/Other/dis_keyboard.sh \u003e/dev/null 2\u003e\u00261 但是一直没有效果，到最后也没有发现具体的原因 zhengyang@zhengyangpc:~/Other$ tail -f /var/log/cron.log Apr 4 00:54:00 zhengyangpc anacron[919]: Anacron 2.3 started on 2022-04-04 Apr 4 00:54:00 zhengyangpc anacron[919]: Normal exit (0 jobs run) Apr 4 00:54:00 zhengyangpc cron[923]: (CRON) INFO (pidfile fd = 3) Apr 4 00:54:00 zhengyangpc cron[923]: (CRON) INFO (Running @reboot jobs) Apr 4 00:54:00 zhengyangpc CRON[1002]: (zhengyang) CMD (/home/zhengyang/Other/dis_keyboard.sh \u003e/dev/null 2\u003e\u00261) 最终还是选择了修改.bash_profile ~/.bash_profile .bash_profile是Linux每个用户自己的专用Shell配置文件，系统会在用户登录时自动执行一次该文件。那么我只需要在其中加入禁用命令即可 注意\r\rUbuntu以~/.profile代替，同样的作用，目的是为了兼容其他的Shell\r\r 修改~/.profile 使用vim进行编辑 zhengyang@zhengyangpc:~$ vim .profile zhengyang@zhengyangpc:~$ cat .profile ... # Set up to automatically disable the keyboard xinput disable `xinput list | grep AT | egrep -o \"id=[0-9]*\" | egrep -o \"[0-9]*\"` 验证 .bash_profile/.profile只对当前用户生效。但类似于/etc/profile，也需要重启后才会生效 zhengyang@zhengyangpc:~/Other$ reboot ","date":"2022-04-04","objectID":"/2022/04/linux-autodisable-keyboard/:2:0","tags":["键盘禁用"],"title":"Linux设置自动禁用键盘","uri":"/2022/04/linux-autodisable-keyboard/"},{"categories":["Computer"],"content":"记录了我为旧笔记本加装内存和硬盘的经历","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"记录了旧笔记本升级硬件配置的过程。 ","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:0:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"前言 女朋友的笔记本是大学时期购买的——华硕飞行堡垒X550JX，15年上市，预装Windows10系统。放到现在，硬件已经跟不上软件的迭代，用起来非常卡，打开浏览器大概需要10s。吃灰又有些可惜了 考虑将部分硬件做一下升级，鉴于自身的能力与条件，最终选择加装固态和内存 这是原始硬件配置 Windows10 i5-4200H @ 2.80GHz 双核 华硕 X550JX 4GB ( GLOWAY DDR3L 1600MHz ) Toshiba 1T 机械硬盘 Nvidia GeForce GTX 950M ( 2 GB ) 友达 AUO36ED ( 15.5 英寸 ) Atheros AR9565 Wireless Network Adapter / Azurewave 升级后的配置 System: Kernel: 5.13.0-37-generic x86_64 bits: 64 compiler: N/A Desktop: Gnome 3.36.9 Distro: Ubuntu 20.04.4 LTS (Focal Fossa) Machine: Type: Laptop System: ASUSTeK product: X550JX v: 1.0 serial: \u003cfilter\u003e Mobo: ASUSTeK model: X550JX v: 1.0 serial: \u003cfilter\u003e BIOS: American Megatrends v: X550JX.209 date: 10/31/2015 Battery: ID-1: BAT0 charge: 28.7 Wh condition: 28.9/41.4 Wh (70%) model: ASUSTeK ASUS Battery status: Not charging CPU: Topology: Dual Core model: Intel Core i5-4200H bits: 64 type: MT MCP arch: Haswell rev: 3 L2 cache: 3072 KiB flags: avx avx2 lm nx pae sse sse2 sse3 sse4_1 sse4_2 ssse3 vmx bogomips: 22347 Speed: 901 MHz min/max: 800/3400 MHz Core speeds (MHz): 1: 1161 2: 1127 3: 1340 4: 1112 Graphics: Device-1: Intel 4th Gen Core Processor Integrated Graphics vendor: ASUSTeK driver: i915 v: kernel bus ID: 00:02.0 Device-2: NVIDIA GM107M [GeForce GTX 950M] vendor: ASUSTeK driver: nvidia v: 450.172.01 bus ID: 01:00.0 Display: x11 server: X.Org 1.20.13 driver: modesetting,nvidia unloaded: fbdev,nouveau,vesa resolution: 1920x1080~60Hz OpenGL: renderer: Mesa DRI Intel HD Graphics 4600 (HSW GT2) v: 4.5 Mesa 21.2.6 direct render: Yes Audio: Device-1: Intel Xeon E3-1200 v3/4th Gen Core Processor HD Audio driver: snd_hda_intel v: kernel bus ID: 00:03.0 Device-2: Intel 8 Series/C220 Series High Definition Audio vendor: ASUSTeK driver: snd_hda_intel v: kernel bus ID: 00:1b.0 Sound Server: ALSA v: k5.13.0-37-generic Network: Device-1: Qualcomm Atheros QCA9565 / AR9565 Wireless Network Adapter vendor: AzureWave driver: ath9k v: kernel port: e000 bus ID: 03:00.0 IF: wlp3s0 state: up mac: \u003cfilter\u003e Device-2: Realtek RTL8111/8168/8411 PCI Express Gigabit Ethernet vendor: ASUSTeK driver: r8169 v: kernel port: d000 bus ID: 04:00.1 IF: enp4s0f1 state: down mac: \u003cfilter\u003e Drives: Local Storage: total: 1.14 TiB used: 26.93 GiB (2.3%) ID-1: /dev/sda vendor: Toshiba model: MQ01ABD100 size: 931.51 GiB ID-2: /dev/sdb vendor: Teclast model: 256GB SSD size: 238.47 GiB Partition: ID-1: / size: 46.97 GiB used: 26.90 GiB (57.3%) fs: ext4 dev: /dev/sdb5 Sensors: System Temperatures: cpu: 50.0 C mobo: N/A Fan Speeds (RPM): cpu: 2600 Info: Processes: 305 Uptime: 1h 55m Memory: 11.58 GiB used: 4.34 GiB (37.5%) Init: systemd runlevel: 5 Compilers: gcc: 9.4.0 Shell: bash v: 5.0.17 inxi: 3.0.38 使用了一段时间，目前没有遇到什么问题 ","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:1:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"配件购买 没有追求极致性价比，图省事直接在京东购买 经查询了解到 华硕X550JX是板载内存4GB DDR3 1600 MHz，只预留了一个SODIMM插槽最大支持8GB 没有多余硬盘位接口，且只支持SATA，但光驱是假光驱，可以拆卸后加装硬盘光驱位 那么我可以 加装一条8GB DDR3L 1600 MHz的内存扩容至12GB 将原有的机械硬盘位更换为固态做系统盘 拆掉假光驱，加装硬盘托盘放置机械硬盘 于是便购买了 台电 256GB SSD ( 256 GB / 固态硬盘 ）| ￥169.9 8GB ( GLOWAY DDR3L 1600MHz / 低电压版 内存条) | ￥178.0 9mm光驱位硬盘托架 | ￥9.8 多功能螺丝刀套装 | ￥17.8 花费合计375.5元 ","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:2:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"更换升级 其实一开始直接购买了两条内存，拆开后才发现原始的4GB是板载内存，只能加装一个，无奈只好退货。所以下次再搞，要事先清楚这些注意事项。另外写下本文时已经升级完成，就不再特意拆开拍照了 准备好工具，拆卸起来还是比较顺利的，步骤大致如下 卸去电池 卸去螺丝 卸去后盖 能够看到预留内存插槽，如果只需要加装内存，到这一步就可以了，后续不需要再拆卸 卸去键盘(注意键盘主板间连接排线) 卸去光驱 托盘固定好硬盘 装入托盘并固定 顺便清理一下灰尘 组装 拆卸下的光驱 \r\r","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:3:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"系统重装 本子出厂预装的是Windows 10，用起来实在是太卡，决定将其后退至Windows 7，重装过程比较顺利，没有遇到报错。以下是安装过程 下载Windows 7镜像文件 制作WinPE，这里使用的是微PE 进入 BIOS 选择 U盘启动，进入WinPE 使用DiskGenius进行分区 Windows 7 安装 重启进入系统 这里出现了一个小插曲，进去系统后无线鼠标和网卡都无法使用，因为没有安装驱动。在官网、驱动精灵、驱动总裁等下载好网卡驱动放入U盘后，插上电脑居然也无法使用，只好在WinPE中将驱动复制到硬盘之后再重启安装，之后才恢复上网 重装后的Windows 7 总是动不动就蓝屏，尝试360修复也不管用，经过漏洞修复，系统更新一番操作，恢复正常了，玄学 ","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:4:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"Win7 + Linux 其实笔记本女朋友平时也不怎么用，我又可以继续瞎折腾了，于是便划出50G的空间用来装Ubuntu \r\r\r\r下面是Ubuntu的安装过程 下载Ubuntu.iso镜像文件，国内推荐清华大学开源软件镜像站，速度更快，更稳定 使用UltraISO软碟通刻录启动盘 这里我使用的是另一款软件—— Ventoy，功能同样强大 划分空间，这里我把整个D盘配给Ubuntu 进入 BIOS 选择 U盘启动进行安装，我选择的是断网安装，安装好后再进行update、upgrade等操作，这样可以节省安装时间。另外，我希望Ubuntu可以和Windows 7共存，所以在安装类型选择了两者共存 不出意外的话大概需要5-10分钟就安装完成了 重启，记得拔U盘 重启进入系统时，GUN GRUB引导默认是Ubuntu *Ubunut Ubuntu高级选项 Memory test (memtest86+) Memory test (memtest86+,.....) Windows 7 (loader) (on /dev/...) 由于这个本子的主人依旧是我女朋友，所以需要将默认启动顺序进行调整。终端输入 sudo gedit /etc/default/grub 将 GRUB_DEFAULT=0 # GRUB默认启动项 GRUB_TIMEOUT=10 # GRUB默认倒计时 修改为 GRUB_DEFAULT=4 # 修改为4，即默认启动项为Windows 7 GRUB_TIMEOUT=5 # 修改为5，即默认倒计时为5s 更新配置 sudo update-grub ","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:5:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Computer"],"content":"未来打算 大学期间使用过一段时间Ubuntu，感受是相对简陋的配置下，Linux运行更加流畅。现在Linux也有很多Windows平台的移植软件包，在优麒麟应用商店、deepin-wine等都能找到，安装非常便捷，只是软件稳定性、流畅性等方面与Windows平台相比还有些欠缺 在Ubuntu上使用微信 wget -O- https://deepin-wine.i-m.dev/setup.sh | sh # 添加仓库 sudo apt-get install com.qq.weixin.deepin 这里是已经安装了的 zhengyang@zhengyangpc:~$ apt list --installed | grep weixin WARNING: apt does not have a stable CLI interface. Use with caution in scripts. com.qq.weixin.deepin/未知,now 3.4.0.38deepin6 i386 [已安装] 微信使用体验 \r\r \r\r浏览器(Firefox)使用体验 \r\rWPS使用体验 \r\r日常使用微信和Excel比较多，在Linux上也有替代，于是就有了从Windows转Linux的想法 打算后续再组装一个台式机，硬盘配置就512G固态+1T机械，分别装Windows和Linux，机械硬盘两者都可以挂载读取。两者又可作为主力使用，Windows上打打游戏，Linux学学开发(有人说使用Liunx本就是学习) 笔记本就不折腾了，Windows养老 ","date":"2022-03-30","objectID":"/2022/03/hardware-upgrade/:6:0","tags":["Windows","Linux"],"title":"笔记本配置升级—内存、硬盘","uri":"/2022/03/hardware-upgrade/"},{"categories":["Linux"],"content":"Linux下配置clash","date":"2022-03-19","objectID":"/2022/03/linux-config-clash/","tags":["Linxu","Clash"],"title":"Linux下配置Clash","uri":"/2022/03/linux-config-clash/"},{"categories":["Linux"],"content":"记录了我在Linux环境配置Clash的过程。 在windows上使用梯子很方便，SSR、V2等都是图形化界面，很容易操作。最近换到了Linux环境，代理需要配置一下 也是第一次配置，记录如下 ","date":"2022-03-19","objectID":"/2022/03/linux-config-clash/:0:0","tags":["Linxu","Clash"],"title":"Linux下配置Clash","uri":"/2022/03/linux-config-clash/"},{"categories":["Linux"],"content":"安装 首先需要在clash下载对应版本的二进制包，我这里下载的是clash-linux-amd64-v1.9.0 解压 gzip -d clash-linux-amd64-v1.9.0.gz 赋予执行权限 chmod +x clash-linux-amd64-v1.9.0  单独放置 mkdir l_clash \u0026\u0026 mv clash-linux-amd64-v1.9.0 l_clash 下载配置文件 cd l_clash wget -O config.yaml [订阅链接https://...]  首次运行，自动生成Country.mmdb # -d表示指定当前文件夹为configuration directory zhengyang@zhengyangpc:~/Downloads/l_clash$ ./clash-linux-amd64-v1.9.0 -d . INFO[0000] Can't find MMDB, start download INFO[0002] Start initial compatible provider Proxy INFO[0002] Start initial compatible provider Domestic INFO[0002] Start initial compatible provider GlobalTV INFO[0002] Start initial compatible provider AsianTV INFO[0002] Start initial compatible provider Others INFO[0002] RESTful API listening at: [::]:9090 设置系统代理 \r\r验证是否成功 zhengyang@zhengyangpc:~$ curl https://twitter.com/ \u003c!DOCTYPE html\u003e \u003chtml dir=\"ltr\" lang=\"en\"\u003e \u003cmeta charset=\"utf-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0,viewport-fit=cover\" /\u003e ...  或浏览器中访问www.google.com  \r\r","date":"2022-03-19","objectID":"/2022/03/linux-config-clash/:1:0","tags":["Linxu","Clash"],"title":"Linux下配置Clash","uri":"/2022/03/linux-config-clash/"},{"categories":["Linux"],"content":"配置 修改配置文件 sudo nano config.yaml 大部分是不需要修改的 # HTTP 代理端口port:7890# SOCKS5 代理端口socks-port:7891# Linux 和 macOS 的 redir 代理端口redir-port:7892# 允许局域网的连接allow-lan:true# 规则模式：Rule（规则） / Global（全局代理）/ Direct（全局直连）mode:rule# 设置日志输出级别 (默认级别：silent，即不输出任何内容，以避免因日志内容过大而导致程序内存溢出）。# 5 个级别：silent / info / warning / error / debug。级别越高日志输出量越大，越倾向于调试，若需要请自行开启。log-level:silent# Clash 的 RESTful APIexternal-controller:'0.0.0.0:9090'# RESTful API 的口令secret:'12345678'# 密码可以设置简单些，也可以不用设置# 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `RESTful API/ui`# 参数应填写配置目录的相对路径或绝对路径。# external-ui: folder WebUI 可以在 http://clash.razord.top 中进行切换节点等设置 \r\r也可以使用本地external-ui，直接使用Clash提供的Web服务 git clone https://github.com/Dreamacro/clash-dashboard.git cd clash-dashboard git checkout -b gh-pages origin/gh-pages # 记得切换  在config.yaml中引入外部控制UI的路径 # 您可以将静态网页资源（如 clash-dashboard）放置在一个目录中，clash 将会服务于 `RESTful API/ui`# 参数应填写配置目录的相对路径或绝对路径。external-ui:./clash-dashboard 启动clash后访问 0.0.0.0:9090/ui，一样的效果。此时并没有通过代理来访问  设置好代理，可以正常使用 \r\r结束使用时再将系统代理关闭即可 ","date":"2022-03-19","objectID":"/2022/03/linux-config-clash/:2:0","tags":["Linxu","Clash"],"title":"Linux下配置Clash","uri":"/2022/03/linux-config-clash/"},{"categories":["Linux"],"content":"记录了Linux下ResilioSync的基本配置","date":"2022-03-15","objectID":"/2022/03/linux-install-resiliosync/","tags":["ResilioSync","文件传输"],"title":"Linux下使用ResilioSync","uri":"/2022/03/linux-install-resiliosync/"},{"categories":["Linux"],"content":"记录了我在Linux下安装配置ResilioSync的过程。 这边有两台计算机，一个系统为ubuntu 20.04，另一部为windows11。两台设备之间的文件传输是必不可少的。 跨平台传文件，如果是局域网内，最方便就是通过FTP来互传文件了，手机上安装一个局域网精灵类似的软件，就可以实现。 Snapdrop.net我也有试过，传一段文字或图片类的小文件非常方便，可能是我的姿势不对，这个网站经常失效。 有用过Resilio Sync这款软件，虽然没感觉有多么好用，不过还是给装上了。 这里便记录一下安装配置的过程。 ","date":"2022-03-15","objectID":"/2022/03/linux-install-resiliosync/:0:0","tags":["ResilioSync","文件传输"],"title":"Linux下使用ResilioSync","uri":"/2022/03/linux-install-resiliosync/"},{"categories":["Linux"],"content":"下载 进入Resilio Sync下载页面，选择合适的包 i386 x64 i386 (glibc 2.3) x64 (glibc 2.3) ARM ARMHF ","date":"2022-03-15","objectID":"/2022/03/linux-install-resiliosync/:1:0","tags":["ResilioSync","文件传输"],"title":"Linux下使用ResilioSync","uri":"/2022/03/linux-install-resiliosync/"},{"categories":["Linux"],"content":"安装 解压 tar -zxvf resilio-sync_x64.tar.gz # LICENSE.TXT # rslsync 开启服务 ./rslsync By using this application, you agree to our Privacy Policy, Terms of Use and End User License Agreement. https://www.resilio.com/legal/privacy https://www.resilio.com/legal/terms-of-use https://www.resilio.com/legal/eula Resilio Sync forked to background. pid = 4693 ","date":"2022-03-15","objectID":"/2022/03/linux-install-resiliosync/:2:0","tags":["ResilioSync","文件传输"],"title":"Linux下使用ResilioSync","uri":"/2022/03/linux-install-resiliosync/"},{"categories":["Linux"],"content":"配置 ResilioSync在Linux平台并没有图形界面，只能在Web页面使用 浏览器打开http://localhost:8888/gui/进入WebUI，设置好username和passwd便可以进入。后续进入都需要输入密码。 \r\r可以在General配置页面语言以及WebUI的端口等等 ResilioSync的Guide To Linux, And Sync Peculiarities ","date":"2022-03-15","objectID":"/2022/03/linux-install-resiliosync/:3:0","tags":["ResilioSync","文件传输"],"title":"Linux下使用ResilioSync","uri":"/2022/03/linux-install-resiliosync/"},{"categories":["患者招募","工作"],"content":"患者招募工作中项目资料收集要求汇总","date":"2022-03-13","objectID":"/2022/03/patient-data-collection/","tags":["患者招募","资料收集"],"title":"患者招募(2) - 资料收集","uri":"/2022/03/patient-data-collection/"},{"categories":["患者招募","工作"],"content":"这是我对患者招募工作中，常见项目对于患者资料收集的简单汇总。 ","date":"2022-03-13","objectID":"/2022/03/patient-data-collection/:0:0","tags":["患者招募","资料收集"],"title":"患者招募(2) - 资料收集","uri":"/2022/03/patient-data-collection/"},{"categories":["患者招募","工作"],"content":"1. 慢病 注意\r\r以下整理具有时效性，不具有代表性\r\r 1.1 高血压 百度百科 基本入排 140 ≤ 高压 ≤ 180 90 ≤ 低压 ≤ 110 吃药或不吃药 资料收集 病历(必需) 血压图片(必需) 用药记录(非必需) 购药小票 用药情况 1.2 高血脂 基本入排 高血脂症危险分层 极高危受试者：LDL-C ≥70 mg/dL（≥1.8 mmol/L） 高危受试者：LDL-C ≥100 mg/dL（≥2.6 mmol/L） 不满足极高危/高危因素受试者：LDL-C≥130 mg/dL（≥3.4 mmol/L） 吃药或不吃药 资料收集 病历 低密度脂蛋白LDL(最近) 低密度脂蛋白胆固醇LDL-C(最近) 其他资料 1.3 糖尿病 基本入排 7.5% ≤ 糖化血红蛋白HbA1c ≤ 10.5% 空腹血糖FPG ≤ 13.9mmol/L 吃药或不吃药 资料收集 病历 糖化血红蛋白化验(最近) 空腹血糖化验(最近) `用药记录(非必需) 购药小票 用药情况 1.4 类风湿 基本入排 血沉(ESR) ≥ 28mm/小时 或 C反应蛋白(CRP) ≥ 6mg/L 或 晨僵时间 ≥ 45分钟 [三者满足其一即可] 至少有6个肿胀关节 资料收集 病历 血沉 C反应蛋白 肿胀关节图片 用药记录 购药小票 用药情况 1.5 乙肝 如何区分大小三阳？ 基本入排 乙肝五项显示表面抗原为阳性 HBV DNA病毒定量 HBeAg 阳性即大三阳要求 2×105\u003e IU/mL HBeAg 阴性即小三阳要求 2×104\u003e IU/mL 胆红素要求 尿蛋白要求 资料收集 病历(非必需) 乙肝五项(又称两对半) HBV DNA病毒定量 肝功 尿常规 1.6 肝腹水 基本入排 腹水分级为1~2级 血清白蛋白(ALB) ≤ 30 g/L 资料收集 病历 白蛋白 ","date":"2022-03-13","objectID":"/2022/03/patient-data-collection/:1:0","tags":["患者招募","资料收集"],"title":"患者招募(2) - 资料收集","uri":"/2022/03/patient-data-collection/"},{"categories":["患者招募","工作"],"content":"2. 肿瘤 资料收集 病理报告 出院记录 可测量病灶（CT,NMR） 患者最近的CT，血检，尿检等 医嘱单 基因检测（根据项目需求提供） 患者生活质量量表QLQ \r注： 病历主要体现在疾病诊断证明 化验单有时效性。最近多指2-3个月 ","date":"2022-03-13","objectID":"/2022/03/patient-data-collection/:2:0","tags":["患者招募","资料收集"],"title":"患者招募(2) - 资料收集","uri":"/2022/03/patient-data-collection/"},{"categories":["患者招募","工作"],"content":"记录了我在工作中如何去拜访医生","date":"2022-03-10","objectID":"/2022/03/visit-doctor/","tags":["患者招募","陌拜"],"title":"患者招募(1) - 拜访医生","uri":"/2022/03/visit-doctor/"},{"categories":["患者招募","工作"],"content":"这是我对日常拜访医生的个人总结。 患者招募工作，前期资源渠道的积累，主要体现在跑医院拜访医生 ","date":"2022-03-10","objectID":"/2022/03/visit-doctor/:0:0","tags":["患者招募","陌拜"],"title":"患者招募(1) - 拜访医生","uri":"/2022/03/visit-doctor/"},{"categories":["患者招募","工作"],"content":"项目信息准备 和专业程度相对较高的主任医生沟通，除了需要一定的专业知识储备，自身对于项目的理解同样重要 以信立泰高血压Ⅲ期为例，做一些简单的信息准备工作 常用平台 药物临床试验登记与信息公示平台 中国临床试验注册中心 百度搜索 维基百科 常规问题 药物信息 S086片，中文名沙库巴曲阿利沙坦钠片，沙库巴曲和阿利沙坦酯的复方制剂，属于ARNI类药物，用于治疗轻、中度高血压 申办方信息 问及药物是哪个厂家时，可以报出厂家信息，如深圳信立泰 临床分期 Ⅲ期 试验对照药 奥美沙坦酯片，以其为对照验证S086的疗效 入排信息 略，记下几个重要的点，如年龄区间、血压上下限、要求是否吃药等 用法用量 随机分组，口服药等等 周期回访 周期三个月，每半个月去一次医院体检拿药 医院情况 中心：四川大学华西医院 主任：陈晓平 患者需求数量 全国一共700多例，本中心30例。(一般当地中心15-30例左右) 药物疗效 可以治疗原发性高血压和慢性心衰，前期临床取得一定的成效，目前三期已经开展一段时期，临床上得到的反馈都还不错 与市面上的药物对比 现有临床试验数据显示，S086药效确切，安全性好，成药性高 S086不经肝脏代谢，无代谢基因多态性风险，具有药物相互作用风险小，肝脏负荷小、毒性低等优势 其相似药物为诺华的诺欣妥，同属于ARNI药物，不仅具有抑制肾素血管紧张素和交感神经活性的作用，还具备扩张血管、利尿利钠作用 在常规类降压药基础上联合ARNI类药物可以产生更好的降压效果，帮助提升高血压的控制率 ","date":"2022-03-10","objectID":"/2022/03/visit-doctor/:1:0","tags":["患者招募","陌拜"],"title":"患者招募(1) - 拜访医生","uri":"/2022/03/visit-doctor/"},{"categories":["患者招募","工作"],"content":"拜访医生 项目方案、入排吃透，做足准备后再与医生沟通会轻松许多 确认科室 不同的项目，病种，确认主要去跑哪些科室，更加有针对性 疾病分类 主要分布科室 高血压 心血管科、内科、中医科 高血脂 内科、内分泌科 糖尿病 内科、内分泌科、老年康复科 类风湿 风湿免疫科 肝腹水 消化内科、肝病科、外科 妇科肿瘤 妇科、肿瘤科 乙肝 消化内科、感染科、肝病科、外科 银屑病 皮肤科 其他肿瘤 肿瘤科 待补充… 待补充… 初次拜访 注意\r\r沟通工作是比较灵活的，什么情况都会发生，这里只是一个示例\r\r 首先将手机调至静音状态，以免沟通途中被电话打断 观察主任办公室情况，若有患者正在就诊或医生数量较多则不适合拜访 进入前，敲门轻击三次，引起注意，说明来意 您好刘主任，打扰您几分钟时间/我是华西医院的，占用您几分钟时间 若得到正面回应或肯定则步入正题 主任你好，我这边是华西医院/招募公司的，我们医院正在开展一个高血压的Ⅲ期临床试验(将提前准备好的项目方案给主任一份)，目前还在招募阶段，您看能帮助给我们医院推荐一些合适的患者参加临床治疗，咱的患者入组后会有一定的科研费，到时候这边将以现金的形式给到您，您看怎么样？ 之后便是项目情况、患者获益等问题的沟通 中途若是有患者来就诊，暂时停止沟通，等待结束再继续 沟通顺利后能加微信的一定要加微信，不能加微信的可以留一张名片 二次拜访 判断一位主任是否愿意合作，一次的拜访沟通是不够的，通常需要多次拜访 提前约好或直接去医院(可以顺手买点水果) 沟通项目情况和患者储备情况，为主任排除推荐患者的阻力 及时止损 针对一位主任多次拜访仍未推荐患者或有明显的排斥，及时止损，放弃对这位主任的开发 ","date":"2022-03-10","objectID":"/2022/03/visit-doctor/:2:0","tags":["患者招募","陌拜"],"title":"患者招募(1) - 拜访医生","uri":"/2022/03/visit-doctor/"},{"categories":["Windows","记录"],"content":"笔记本禁用自带键盘","date":"2022-03-06","objectID":"/2022/03/disable-keyboard/","tags":["键盘禁用"],"title":"笔记本禁用自带键盘","uri":"/2022/03/disable-keyboard/"},{"categories":["Windows","记录"],"content":"记录了如何禁用笔记本自带键盘的方法。 我的笔记本电脑用的是另外购置的键盘，自带键盘很少用到。桌子也比较窄，宽度刚好可以放下一电脑，再放上一个键盘总会误触到自带的键 为了解决这个麻烦，想到将其自带键盘禁用，只用外接的键盘，尝试在设备管理器中把自带键盘禁用或卸载驱动，但都无效 有网友给出了解决办法 注意\r\r需要管理员运行，返回SUCCESS的字样表示成功。之后需要重启\r\r 打开键盘禁用 sc config i8042prt start= disabled 关闭键盘禁用 sc config i8042prt start= demand 参考文章 win10系统禁用笔记本自带键盘的有效方法 ","date":"2022-03-06","objectID":"/2022/03/disable-keyboard/:0:0","tags":["键盘禁用"],"title":"笔记本禁用自带键盘","uri":"/2022/03/disable-keyboard/"},{"categories":["Python"],"content":"这里记录了我学习python的过程","date":"2022-03-06","objectID":"/2022/03/python-day05/","tags":["Python"],"title":"Python学习-Day05","uri":"/2022/03/python-day05/"},{"categories":["Python"],"content":"python的一些练习题。 Pythonav的内容自函数部分及后续就没有设置练习题，于是便去找了其他的练习题集 Python 小例子[中文] 项目地址 PythonTip[中文] 项目地址 Python - 100天[中文] 项目地址 PythonChallenge[英文] 项目地址 今日练习部分 练习一\r\r一个字符串 a， 输出逆序之后的a。 例如：a=‘xydz’，则输出：zdyx\r\r 利用切片步长进行排序 print(''.join(list(a)[::-1])) 利用list.reverse进行排序 a = 'xydz' b = [str(i) for i in list(a)] b.reverse() print(''.join(b)) 练习二\r\ra={1:1,2:2,3:3}，输出a的key，以',‘连接。要求key以字典序升序排列，key可以是字符串 如：a={1:1,2:2,3:3}, 则输出：1,2,3\r\r ','.join(str(i) for i in sorted([int(i) for i in a.keys()])) 练习三\r\r输出字符串a中奇数位置字符构成的字符串(位置编号从1开始)。 例如：a=‘xyzwd’，则输出:xzd\r\r list1 = [] for i in a: if (a.find(i) + 1) % 2 != 0: list1.append(i) print(''.join(list1)) 练习四\r\r在屏幕上显示跑马灯文字\r\r import os import time content = '全场都2元...' while True: os.system('cls') print(content) time.sleep(0.2) content = content[1:] + content[0] ","date":"2022-03-06","objectID":"/2022/03/python-day05/:0:0","tags":["Python"],"title":"Python学习-Day05","uri":"/2022/03/python-day05/"},{"categories":["Python"],"content":"这里记录了我学习python的过程","date":"2022-03-02","objectID":"/2022/03/pythonav-day04/","tags":["Python"],"title":"Python学习-Day04","uri":"/2022/03/pythonav-day04/"},{"categories":["Python"],"content":"学习Python的第四篇日志。 Python学习-Day04 今天将第八章的试题练习了一下。浅拷贝和深拷贝 # ------------------------------------------- # 笔试题(部分) # ------------------------------------------- # 12.写代码实现将字符串 v = “全栈21期” 反转 v = '我吃西红柿' li = list(v) li.reverse() print(li) # ------------------------------------------- # 13.看结果写结果 info = [ {'k1': 1, 'k2': {'k9': 'oldboy', 'k10': '一天天'}}, (11, 22, 33, 44), {199, 2, 3, 4, 5}, True, ['武沛齐', '景女神', {'extra': (\"alex\", 'eric', [18, 20])}] ] # 根据索引获取上述结构中的 1 print(info[0]['k1']) # 请根据索引获取上述结构中的 “oldboy” print(info[0]['k2']['k9']) # 请根据索引获取上述结构中的 44 print(info[1][-1]) # 根据索引获取上述结构中的 “天天” print(info[0]['k2']['k10'][-2:]) # 请循环打印 上述结构 中的集合 for i in info[2]: print(i) # 无序 # 在上述结构中 extra 所在的字典中添加一个键值对，并设置键为：True, 值为 ”真“ info[-1][-1][True] = \"真\" print(info) # 请在上述结构中 [18,20] 中添加一个整型元素：69 info[-1][-1]['extra'][-1].insert(1, 69) print(info) # ------------------------------------------- # 14.看代码写结果 # 布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。 result = 1 \u003e 6 and 8 \u003c 9 # 优先级：比较运算符\u003e赋值运算符\u003e逻辑运算符 False and True \u003e\u003e False print(result) # False # 布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值 result = 1 or 2 print(result) # 1 result = 0 or True print(result) # True # and有更高的优先级 result = 1 and 8 or True and 4 # \u003e\u003e 8 or 4 \u003e\u003e 8 print(result) # 8 result = 'Alex' or '' and 'oldboy' # \u003e\u003e 'Alex' or False \u003e\u003e 'Alex' print(result) # 'Alex' # ------------------------------------------- # 15.写代码实现实现将字符串 v = “k1|v1,k2|v2,k3|v3…” 转换成字典 {‘k1’:’v1’,’k2’:’v2’,’k3’:’v3’..} v = 'k1|v1,k2|v2,k3|v3' vDict = {} v1 = v.split(\",\") print(v1) for i in v1: vDict[i.split(\"|\")[0]] = i.split(\"|\")[1] print(vDict) # ------------------------------------------- # 16.实现一个整数乘法计算器,输入：5*9*99.... 或5* 9 * 10 * 99 或5 * 9 * 99（含空白） x = [] content = input(\"请输入算式：\") con_list = content.split(\"*\") for i in con_list: i.strip() x.append(i) count = 1 for i in x: count *= int(i) print(count) # ------------------------------------------- # 17.看代码写v1, v2? # 传递了地址，修改了地址的值 v1 = [1, 2, 3, 4, 5] v2 = [v1, v1, v1] v2[1][0] = 111 v2[2][0] = 222 print(v1) # [222, 2, 3, 4, 5] print(v2) # [[222, 2, 3, 4, 5], [222, 2, 3, 4, 5], [222, 2, 3, 4, 5]] # ------------------------------------------- # 18.请将info中索引值为偶数的值使用 “*” 拼接起来，并写入到文件 b.txt 中 info = ['你是', '到底', '是', '不是', '一个', '魔鬼'] list1 = [] for i in range(len(info)): if i % 2 == 0: list1.append(info[i]) str1 = \"*\".join(list1) print(str1) f = open('b.txt', mode='w', encoding='utf-8') f.write(str1) f.flush() f.close() # ------------------------------------------- # 机试题 # ------------------------------------------- # 1.根据车牌信息，分析出各省的车牌持有数量 cars = ['鲁A32444', '鲁B12333', '京B8989M', '黑C49678', '黑C46555', '沪B25041', '黑C34567', '沪A46556'] info = {'鲁': 0, '黑': 0, '京': 0, '沪': 0} for car in cars: if car[0] == '鲁': info['鲁'] += 1 elif car[0] == '京': info['京'] += 1 elif car[0] == '黑': info['黑'] += 1 else: info['沪'] += 1 print(info) # ------------------------------------------- # 2.利用文件操作，将其构造成如下数据类型。 # # data.txt文件内容如下 # id,name,age,phone,job # 1,alex,22,13651054608,IT # 2,wusir,23,13304320533,Tearcher # 3,taibai,18,1333235322,IT # info = [{'id':'1','name':'alex','age':'22','phone':'13651054608','job':'IT'},......] dic = [] dic2 = [] info = {} f = open('b.txt', mode='r', encoding='utf-8') import copy for line in f: dic.append(line.strip().split(',')) titleList = dic.pop(0) print(dic) for i in dic: for j in range(len(i)): info[titleList[j]] = i[j] dic2.append(copy.deepcopy(info)) print(dic2) # ------------------------------------------- # 3.请使用for循环打印 9*9乘法表 for i in range(10): for j in range(i): print(\" %s*%s=%s\" % (i, j+1, i*(j+1)), end='') print('') ","date":"2022-03-02","objectID":"/2022/03/pythonav-day04/:0:0","tags":["Python"],"title":"Python学习-Day04","uri":"/2022/03/pythonav-day04/"},{"categories":["Python"],"content":"这里记录了我学习python的过程","date":"2022-03-01","objectID":"/2022/03/pythonav-day03/","tags":["Python"],"title":"Python学习-Day03","uri":"/2022/03/pythonav-day03/"},{"categories":["Python"],"content":"Python学习的第三篇日志。 Python学习-Day03 今天学习了第七章数据类型(三)种的内容，字典dict和集合set # 相比较于元组和列表，字典的元素必须是 键值对 # 在Python3.6+ dict为有序的 # dict的键 必须可哈希 可哈希(hashable,不可改变，其生命周期内保持不变)的类型：int/bool/str/tuple；不可哈希的类型：list/dict/set # 集合有三特殊特点：子元素不重复、子元素必须可哈希、无序 # ------------------------------------- # 练习题 # ------------------------------------- # 1.根据需求写代码 dic1 = {'k1': \"v1\", \"k2\": \"v2\", \"k3\": [11, 22, 33]} # 请在字典中添加一个键值对，\"k4\": \"v4\"，输出添加后的字典 dic1['k4'] = 'v4' print(dic1) # 请在修改字典中 \"k1\" 对应的值为 \"alex\"，输出修改后的字典 dic1['k1'] = 'alex' print(dic1) # 请在k3对应的值中追加一个元素 44，输出修改后的字典 dic1['k3'].append(44) print(dic1) # 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典 dic1['k3'].insert(0, 18) print(dic1) # ------------------------------------- # 2.根据需求写代码 dic2 = { 'name': ['alex', 2, 3, 5], 'job': 'teacher', 'oldboy': {'alex': ['python1', 'python2', 100]} } # 将name对应的列表追加⼀个元素’wusir’ dic2['name'].append('wusir') print(dic2) # 将name对应的列表中的alex⾸字⺟⼤写 dic2['name'][0] = dic2['name'][0].capitalize() print(dic2) # oldboy对应的字典加⼀个键值对’⽼男孩’,’linux’ dic2['oldboy']['老男孩'] = 'linux' print(dic2) # 将oldboy对应的字典中的alex对应的列表中的python2删除 del dic2['oldboy']['alex'][1] print(dic2) # ------------------------------------- # 3.循环提示用户输入，并将输入内容添加到字典中 如果输入N或n则停止循环 dic3 = {} while True: userInput = input(\"请输入 name|age : \") if 'n' in userInput or 'N' in userInput: break dic3[userInput.split('|')[0]] = userInput.split('|')[1] print(dic3) # ------------------------------------- # 4.写代码实现 v1 = {'alex', '武sir', '肖大'} v2 = [] # 循环提示用户输入，如果输入值在v1中存在，则追加到v2中，如果v1中不存在，则添加到v1中。 # 如果输入N或n则停止循环 while True: userInput = input(\"请输入：\") if 'n' in userInput or 'N' in userInput: print(\"退出\") break if userInput in v1: v2.append(userInput) else: v1.add(userInput) print(v1, v2) # ------------------------------------- # 5.判断以下值那个能做字典的key ？那个能做集合的元素？ li1 = [ 1, # int hashable,既可以dict也可set -1, # 同上 '', # str hashable,dict和set None, # None同样是 immutable object,hashable,dict和set [1, 2], # list为mutable object,unhashable,不可以 (1,), # tuple为immutable object,hashable,可以 {11, 22, 33, 4}, # set为mutable object,unhashable,不可以 {'name': 'wupeiq', 'age': 18} # dict为mutable object,unhashable,不可以 ] # ------------------------------------- # 6.将字典的键和值分别追加到 key_list 和 value_list 两个列表中 keyList = [] valueList = [] dict1 = {'k1': 'v1', 'k2': 'v2', 'k3': 'v3'} for key, value in dict1.items(): keyList.append(key) valueList.append(value) print(keyList, valueList) # ------------------------------------- # 7.字典dic = {‘k1’: “v1”, “k2”: “v2”, “k3”: [11,22,33]} dic7 = {'k1': 'v1', 'k2': 'v2', 'k3': [11, 22, 33]} # a. 请循环输出所有的key for key in dic7.keys(): print(key) # b. 请循环输出所有的value for value in dic7.values(): print(value) # c. 请循环输出所有的key和value for key, value in dic7.items(): # 没有items方法默认循环keys print(key, value) # d. 请在字典中添加一个键值对，\"k4\": \"v4\"，输出添加后的字典 dic7['k4'] = 'v4' print(dic7) # e. 请在修改字典中 \"k1\" 对应的值为 \"alex\"，输出修改后的字典 dic7['k1'] = 'alex' print(dic7) # f. 请在k3对应的值中追加一个元素 44，输出修改后的字典 dic7['k3'].append(44) print(dic7) # g. 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的字典 dic7['k3'].insert(0, 18) print(dic7) # ------------------------------------- # 8.请循环打印k2对应的值中的每个元素 info = { 'k1': 'v1', 'k2': ['alex', 'wupeiqi', 'oldboy'], } for i in info['k2']: print(i) # ------------------------------------- # 9.有字符串'k: 1|k1:2|k2:3 |k3 :4' 处理成字典 {'k': 1, 'k1': 2…} dic9 = {} str9 = 'k:1|k1:2|k2:3|k3:4' li9 = list(str9.split(\"|\")) for item in li9: k, v = item.split(':') dic9[k] = v print(dic9) # ------------------------------------- \"\"\" 10.有如下值 li= [11,22,33,44,55,66,77,88,99,90] 将所有大于 66 的值保存至字典的第一个key对应的列表中 将小于 66 的值保存至第二个key对应的列表中。 result = {'k1':[],'k2':[]} \"\"\" li10 = [11, 22, 33, 44, 55, 66, 77, 88, 99, 90] result = {'k1': [], 'k2': []} for li in li10: if li \u003e 66: result['k1'].append(li) elif li == 66: pass else: result['k2'].append(li) print(result) # ------------------------------------- \"\"\" 商品列表： goods = [ {\"name\": \"电脑\", \"price\": 1999}, {\"name\": \"鼠标\", \"price\": 10}, {\"name\": \"游艇\", \"price\": 20}, {\"name\": \"美女\", \"price\": 998} ] 要求: 1：页面显示 序号 + 商品名称 + 商品价格，如： 1 电脑 1999 2 鼠标 10 ... 2：用户输入选择的商品序号，然后打印商品名","date":"2022-03-01","objectID":"/2022/03/pythonav-day03/:0:0","tags":["Python"],"title":"Python学习-Day03","uri":"/2022/03/pythonav-day03/"},{"categories":["Python"],"content":"这里记录了我学习python的过程","date":"2022-03-01","objectID":"/2022/03/pythonav-day02/","tags":["Python"],"title":"Python学习-Day02","uri":"/2022/03/pythonav-day02/"},{"categories":["Python"],"content":"Python学习的第二篇日志。 Python学习-Day02 今天学习了第六章的数据类型(二)中的内容，涉及到列表list和元组tuple一些方法的简单使用 # ------------------------------------- # list练习题 # ------------------------------------- # 1.写代码，有如下列表，按照要求实现每一个功能 li = [\"alex\", \"WuSir\", \"ritian\", \"barry\", \"wenzhou\"] # 计算列表的长度并输出 print(len(li)) # 请通过步长获取索引为偶数的所有值，并打印出获取后的列表 print(li[0::2]) # 列表中追加元素”seven”,并输出添加后的列表 li.append(\"sever\") print(li) # 请在列表的第1个位置插入元素”Tony”,并输出添加后的列表 li.insert(0, \"Tony\") # 请修改列表第2个位置的元素为”Kelly”,并输出修改后的列表 li[1] = \"Kelly\" print(li) # 请将列表的第3个位置的值改成 “太白”，并输出修改后的列表 li[2] = \"太白\" print(li) # 请将列表l2=[1,”a”,3,4,”heart”]的每一个元素追加到列表li中 l2 = [1, 'a', 3, 4, 'heart'] li.extend(l2) print(li) # 请将字符串s=“qwert”的每一个元素添加到列表li中 # 一行代码实现，不允许循环添加 print(li.extend(list('qwert')), li) # 请删除列表中的元素”ritian”,并输出添加后的列表 print(li.remove('ritian'), li) # 请删除列表中的第2个元素，并输出删除元素后的列表 print(\"删除了%s\" % li.pop(1), li) # 请删除列表中的第2至第4个元素，并输出删除元素后的列表 del li[1:4] print(li) # ------------------------------------- # 2.写代码，有如下列表，利用切片实现每一个功能 li = [1, 3, 2, \"a\", 4, \"b\", 5, \"c\"] # 通过对li列表的切片形成新的列表 [1,3,2] print(li[0:3]) # 通过对li列表的切片形成新的列表 [“a”,4,”b”] print(li[3:6]) # 通过对li列表的切片形成新的列表 [1,2,4,5] print(li[0👎2]) # 通过对li列表的切片形成新的列表 [3,”a”,”b”] print(li[1:-2:2]) # 通过对li列表的切片形成新的列表 [3,”a”,”b”,”c”] print(li[1::2]) # 通过对li列表的切片形成新的列表 [“c”] print(li[-1]) # 通过对li列表的切片形成新的列表 [“b”,”a”,3] print(li[-3::-2]) # ------------------------------------- # 3.写代码，有如下列表，按照要求实现每一个功能 lis = [2, 3, \"k\", [\"qwe\", 20, [\"k1\", [\"tt\", 3, \"1\"]], 89], \"ab\", \"adv\"] # 将列表lis中的”k”变成大写，并打印列表 lis[2] = 'K' lis[3][2][0] = \"K1\" print(lis) # 将列表中的数字3变成字符串”100” lis[1] = 100 lis[3][2][1][1] = 100 print(lis) # 将列表中的字符串”tt”变成数字 101 lis[3][2][1][0] = 101 print(lis) # 在 “qwe”前面插入字符串：”火车头” lis[3].insert(0, '火车头') print(lis) # ------------------------------------- # 4. 请用代码实现循环输出元素的索引和值：users = [“武沛齐”,”景女神”,”肖大侠”] users = ['哈哈哈', '呼呼呼', '啊啊啊'] for item in users: print(users.index(item), item) # ------------------------------------- # 5.有变量 googs = [‘汽车’,’飞机’,’火箭’] 提示用户可供选择的商品 # 用户输入索引后，将指定商品的内容拼接打印，如：用户输入0，则打印 您选择的商品是汽车 googs = ['汽车', '飞机', '火箭'] input1 = input(\"\\n0 汽车\" \"\\n1 飞机\" \"\\n2 火箭\" \"\\n请选择：\") print(\"您选择了%s\" % googs[int(input1)]) # ------------------------------------- # 6.请用代码实现 li = \"alex\" # 利用下划线将列表的每一个元素拼接成字符串”a_l_e_x” str1 = \"alex\" li = [] index = 0 while True: li.append(str1[index]+'_') index += 1 if str1[index] == 'x': li.append(str1[index]) break print(\"\".join(li)) # 或直接 print(\"_\".join(list(str1))) # ------------------------------------- # 7.利用for循环和range找出 0 ~ 100 以内所有的偶数，并追加到一个列表。 l = [] for num in range(101): l.append(num) print(l) # ------------------------------------- # 8.利用for循环和range 找出 0 ~ 50 以内能被3整除的数，并追加到一个列表。 l = [] for i in range(51): if i % 3 == 0 and i != 0: l.append(i) print(l) # ------------------------------------- # 9.利用for循环和range 找出 0 ~ 50 以内能被3整除的数 # 并插入到列表的第0个索引位置，最终结果如下： l = [] for i in range(51): if i % 3 == 0 and i != 0: l.insert(0, i) print(l) # ------------------------------------- # 10.查找列表li中的元素，移除每个元素的空格，并找出以”a”开头 # 并添加到一个新列表中,最后循环打印这个新列表。 li = [\"alexC\", \"AbC \", \"egon\", \" riTiAn\", \"WuSir\", \" aqc\"] li_new = [] for item in li: if item.strip()[0] == 'a': li_new.insert(1, item.strip()) print(li_new) # ------------------------------------- # tuple练习题 # ------------------------------------- # 1. 比较值 v1 = (1) 和 v2 = 1 和 v3 = (1,) 有什么区别？ # v1为\u003cclass 'int'\u003e；v2为\u003cclass 'int'\u003e；v3为\u003cclass 'tuple'\u003e # 2. 比较值 v1 = ((1),(2),(3)) 和 v2 = ((1,),(2,),(3,),) 有什么区别？ # v1为(1, 2, 3)；v2为((1,), (2,), (3,)) # ------------------------------------- # 知识点 range # 在Python2中range会直接生成列表；在Python3中range生成是一个range对象 # 即不会立即在内存中创建这些数，而是在循环时候边使用边创建，节省内存开销 v1 = range(1, 6) # 生成的数为：[1、2、3、4、5] v2 = range(1, 6, 2) # 生成的数为：[1、3、4] v3 = range(6, 1, -1) # 生成的数为：[6、5、4、3、2] # ------------------------------------- # 3.利用for循环和range打印出下面列表的索引 li = [\"alex\", \"WuSir\", \"ritian\", \"barry\", \"wenzhou\"] for i in range(len(li)): print(i, li[i]) # ------------------------------------- # 4.利用for循环和range从100~1，倒序打印 for i in range(100, 0, -1): print(i) # ------------------------------------- ","date":"2022-03-01","objectID":"/2022/03/pythonav-day02/:0:0","tags":["Python"],"title":"Python学习-Day02","uri":"/2022/03/pythonav-day02/"},{"categories":["想法"],"content":"如何洗去衣物上的血渍？","date":"2022-02-28","objectID":"/2022/02/wash-blood-stains/","tags":["想法"],"title":"洗去衣物上的血渍","uri":"/2022/02/wash-blood-stains/"},{"categories":["想法"],"content":"洗去衣物上血渍最佳办法！ 床单上不小心沾上了血渍如何清理掉？ 先用清水(冷水)打湿或者浸泡三两分钟，去楼下超市买块硫磺皂涂抹上去，用小刷子刷或手搓，很轻松就可以洗掉 已经过验证，血渍是完全干了的。非常管用！ ","date":"2022-02-28","objectID":"/2022/02/wash-blood-stains/:0:0","tags":["想法"],"title":"洗去衣物上的血渍","uri":"/2022/02/wash-blood-stains/"},{"categories":["Python"],"content":"这里记录了我学习python的过程","date":"2022-02-28","objectID":"/2022/02/pythonav-day01/","tags":["Python"],"title":"Python学习-Day01","uri":"/2022/02/pythonav-day01/"},{"categories":["Python"],"content":"Python学习的第一篇日志。 开篇 虽然我现在的工作完全用不到编程 不过我相信，不论是现在的信息互联网，或是未来的价值互联网时代，拥有一定的编程开发能力，对我的成长和工作都会有较大的帮助，也顺便拓宽一下自己的技能树 最终选择了Python 目前是以武沛齐老师的pythonav教程为基础，结合廖雪峰老师的python教程和菜鸟教程来完成Python的基础学习 希望自己能坚持下去，坚持练习，坚持把学习、练习的过程以日志的形式记录，加油！ Python学习-Day01 第一天简单过一遍前四章内容，以及第五章的数据类型(一)，将其练习题挨个完成一遍 # 练习题：获取用户输入的字符判断他的数字的字符串中有一个数字（只考虑个位数） # 例如 '你有点2，还特么有点666' 这段字符串中有4个数字 data = input(\"请输入：\") index = 0 list1 = [] while len(data) \u003e index: if data[index].isdecimal(): list1.append(data[index]) index += 1 else: index += 1 print(\"有%s个数字\" % len(list1)) # ---------------------------------- # 作业题 # 有变量 name = \"aleX leNb \" # 移除 name 变量对应的值两边的空格,并输出处理结果 print(name.strip()) # 判断 name 变量是否以 “al” 开头,并输出结果（用切片） print(name.strip()[0:2] == \"al\") # 判断name变量是否以”Nb”结尾,并输出结果（用切片） print(name.strip()[-2:] == \"Nb\") # 将 name 变量对应的值中的 所有的”l” 替换为 “p”,并输出结果 print(name.replace(\"l\", \"p\")) # 将name变量对应的值中的第一个”l”替换成”p”,并输出结果 # str.replace(old, new[, max]) # old -- 将被替换的子字符串。 # new -- 新字符串，用于替换old子字符串。 # max -- 可选字符串, 替换不超过 max 次 print(name.replace(\"l\", \"p\", 1)) # 将 name 变量对应的值根据 所有的”l” 分割,并输出结果 print(name.split('l')) # 将name变量对应的值根据第一个”l”分割,并输出结果 # str.split(str=\"\", num=string.count(str)). # str -- 分隔符，默认为所有的空字符，包括空格、换行(\\n)、制表符(\\t)等。 # num -- 分割次数。默认为 -1, 即分隔所有。 print(name.split('l', 1)) # 将 name 变量对应的值变大写,并输出结果 print(name.upper()) # 将 name 变量对应的值变小写,并输出结果 print(name.lower()) # 请输出 name 变量对应的值的第 2 个字符 print(name[1]) # 请输出 name 变量对应的值的前 3 个字符 print(name[0:3]) # 请输出 name 变量对应的值的后 2 个字符 print(name[-3:-1]) # --------------------------------- # 有字符串 s = '123a4b5c' # 通过对s切片形成新的字符串 “123” print(s[0:3]) # 通过对s切片形成新的字符串 “a4b” print(s[3:6]) # 通过对s切片形成字符串s5,s5 = “c” print(s[-1]) # 通过对s切片形成字符串s6,s6 = “ba2” print(s[5:0:-2]) # ---------------------------------- # 使用while和for循环字符串 s=”asdfer” 中每个元素。 while s2 = \"asdfer\" index = 0 while len(s2) \u003e index: print(s2[index]) index += 1 # for for i in s2: print(i) # ---------------------------------- # 使用while和for循环对s=”321”进行循环 # 打印的内容依次是：”倒计时3秒”，”倒计时2秒”，”倒计时1秒”，”出发！” # 略 # ---------------------------------- # 使用while和for循环分别对字符串 message = “伤情最是晚凉天，憔悴厮人不堪言。” 进行打印 msg = \"伤情最是晚凉天，憔悴厮人不堪言。\" count = 0 while len(msg) \u003e count: print(msg[count]) count = count + 1 # ---------------------------------- # 获取用户输入的内容，并计算前四位”l”出现几次,并输出结果。 user_input = input(\"请输入：\") count_num = 0 for i in user_input[0:4]: if i == 'l': count_num += 1 print(\"前四位中输入了%s次'l'\" % count_num) # ---------------------------------- # 获取用户两次输入的内容，将其中所有的数字获取并进行相加 input1 = input(\"第一次输入：\") input2 = input(\"第二次输入：\") num1, num2 = '', '' for i in input1: if i.isdecimal(): num1 = num1 + i for i in input2: if i.isdecimal(): num2 = num2 + i print(num1, num2, int(num1)+int(num2)) ","date":"2022-02-28","objectID":"/2022/02/pythonav-day01/:0:0","tags":["Python"],"title":"Python学习-Day01","uri":"/2022/02/pythonav-day01/"},{"categories":["吃"],"content":"烹饪-糖醋里脊","date":"2022-02-24","objectID":"/2022/02/sweet-sour-pork/","tags":["烹饪"],"title":"糖醋里脊","uri":"/2022/02/sweet-sour-pork/"},{"categories":["吃"],"content":"完成了糖醋里脊菜品的烹饪。 ","date":"2022-02-24","objectID":"/2022/02/sweet-sour-pork/:0:0","tags":["烹饪"],"title":"糖醋里脊","uri":"/2022/02/sweet-sour-pork/"},{"categories":["吃"],"content":"准备工作 原料 里脊肉 配料 鸡蛋 淀粉 白芝麻 调料 胡椒粉 盐 料酒 植物油 番茄酱 糖 白醋 ","date":"2022-02-24","objectID":"/2022/02/sweet-sour-pork/:1:0","tags":["烹饪"],"title":"糖醋里脊","uri":"/2022/02/sweet-sour-pork/"},{"categories":["吃"],"content":"烹饪流程 切肉 将里脊肉切大片，用刀轻拍肉片(使肉质松软)，后切长条 腌制 肉中加入适量胡椒粉、盐、料酒，抓匀腌制10-20分钟 加入一个鸡蛋、适量的淀粉、少许的油，少量水，抓匀，使肉充分裹上淀粉和鸡蛋，抓匀腌制10分钟 油炸 锅中烧油，将肉条逐个(避免粘连)下入油锅，炸至浅黄色捞出 下入里脊肉大火油炸，炸至金黄捞出 制糖醋 锅中少量油，油未热时以3:2:1的比例加入番茄酱、白糖、白醋翻炒；比例根据口味微调，白醋可换为陈醋 加入少许水淀粉，炒至粘稠状，下入炸好的里脊肉，翻炒至糖醋均匀裹在肉上 结束 出锅，洒上白芝麻，上桌 注：本次烹饪实践教程来自抖音 ","date":"2022-02-24","objectID":"/2022/02/sweet-sour-pork/:2:0","tags":["烹饪"],"title":"糖醋里脊","uri":"/2022/02/sweet-sour-pork/"},{"categories":["乐趣"],"content":"《遥远的救世主》","date":"2022-02-20","objectID":"/2022/02/self-mockery/","tags":["阅读","笔记"],"title":"《卜算子·自嘲》","uri":"/2022/02/self-mockery/"},{"categories":["乐趣"],"content":"摘自于《遥远的救世主》 ——豆豆 《卜算子·自嘲》\r \r本是后山人，\r\r偶做前堂客。\r\r醉舞经阁半卷书，\r\r坐井说天阔。\r\r大志戏功名，\r\r海斗量祸福。\r\r论到囊中羞涩时，\r\r怒指乾坤错。\r","date":"2022-02-20","objectID":"/2022/02/self-mockery/:0:0","tags":["阅读","笔记"],"title":"《卜算子·自嘲》","uri":"/2022/02/self-mockery/"},{"categories":["Hugo"],"content":"Hugo中为图片添加阴影","date":"2022-02-20","objectID":"/2022/02/imgs-shadow/","tags":["Hugo","Hugo配置"],"title":"Hugo图片添加阴影和圆角","uri":"/2022/02/imgs-shadow/"},{"categories":["Hugo"],"content":"为文章的图片添加阴影和圆角效果。 博客基于Hugo搭建，主题是LoveIt 主题自身并没有对图片进行美化，原始的样式 \r\r之前写作是在微信公众号，配合壹伴插件，也能对图片进行美化，设置圆角和阴影等等。看起来挺舒服的 用开发者工具查看其样式，直接照搬 .imgShadow { box-shadow:rgb(210, 210, 210) 0em 0em 0.5em 0px; border-radius:6px; } 在Hugo根目录assets下新建/assets/css/_custom.scss样式文件 // ============================== // Custom style // 自定义样式 // ============================== // 公众号文章图片阴影和圆角 .jf-image-shadow { box-shadow:rgb(210, 210, 210) 0em 0em 0.5em 0px; border-radius:6px; } 之后在写文章时再进行引用 \u003ccenter\u003e \u003cimg class=\"jf-image-shadow\" src=\"/images/still-image/limei.png\" title=\"石原里美\" alt=\"图片-石原里美\" height=\"100%\" /\u003e \u003c/center\u003e 效果如下 \r","date":"2022-02-20","objectID":"/2022/02/imgs-shadow/:0:0","tags":["Hugo","Hugo配置"],"title":"Hugo图片添加阴影和圆角","uri":"/2022/02/imgs-shadow/"},{"categories":["Hugo"],"content":"为我的博客文章内容增加版权声明","date":"2022-02-14","objectID":"/2022/02/add-copyright-notice/","tags":["Hugo","Hugo配置"],"title":"文章内容增加版权声明","uri":"/2022/02/add-copyright-notice/"},{"categories":["Hugo"],"content":"为我的原创文章增加版权声明。 前言 因为本人没有系统地学习过前端知识，所以在搭建此博客后进行页面美化以及配置时有些费力，只能去翻看前辈的总结概述，照葫芦画瓢 关于增加版权声明这里，找了许久没有发现能借鉴来的经验(个人能力有限) 笨人用笨方法，这里的解决办法，并不是值得学习的案例… 困难 对于我，还是挺有难度的… 我的内容有个人原创，也有搬运和截取的片段等，但不会使用代码进行逻辑判断 不会使用模板语言等对页面模板进行修改，再增加CSS等的方式进行页面渲染 复杂的页面看不懂，不过简单的HTML和CSS可以看懂一点点 解决方法 在开发者工具中模仿前辈的版权声明，用简单的HTML和简单的行内样式进行页面渲染 刚好在google search中提交站点地图sitemap.xml时遇到状态显示无法读取的问题，去搜索解决方法的时候，看到了这位前辈的一篇报错处理：谷歌 sitemap.xml 报错解决：无法读取此站点地图 他的文档最后就有版权声明，是我喜欢的类型😁 具体操作 在开发者工具中找到对应的标签元素，便是下面的内容 \u003c!--修改前--\u003e \u003cdiv style=\"margin-top:2em;padding:0 1.5em;border:1px solid #d3d3d3;background-color:#deebf7\"\u003e \u003ch3\u003e文档信息\u003c/h3\u003e \u003cul\u003e \u003cli\u003e本文作者：\u003ca href=\"https://last2win.com\" target=\"_blank\"\u003elast2win\u003c/a\u003e\u003c/li\u003e \u003cli\u003e本文链接：\u003ca href=\"https://last2win.com/2020/03/10/google-error/\" target=\"_blank\"\u003ehttps://last2win.com/2020/03/10/google-error/\u003c/a\u003e\u003c/li\u003e \u003cli\u003e版权声明：自由转载-非商用-非衍生-保持署名（\u003ca href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\" target=\"_blank\"\u003e创意共享3.0许可证\u003c/a\u003e）\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e 渲染出的效果如下： 文档信息本文作者：last2win本文链接：https://last2win.com/2020/03/10/google-error/版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）\r如果亲自去查看前辈的效果，不难发现这里的会比较丑… 除了需要更改链接内容外，还需要在几个标签上简单优化 扩大内边距padding-top和padding-bottom 修改背景颜色为#f7f7f7使其与我的页面背景更搭 \u003c!--修改后--\u003e \u003cdiv style=\"margin-top:2em;padding:0 1.5em;border:1px solid #d3d3d3;background-color:#f7f7f7\"\u003e \u003ch3\u003e文档信息\u003c/h3\u003e \u003cul style=\"padding-bottom:1.5em;\"\u003e \u003cli style=\"padding-top:0.5em;\"\u003e本文作者：\u003ca href=\"https://zhengyang.wang/\" target=\"_blank\"\u003e正阳\u003c/a\u003e\u003c/li\u003e \u003cli style=\"padding-top:0.5em;\"\u003e本文链接：\u003ca href=\"https://zhengyang.wang/add-copyright-notice\" target=\"_blank\"\u003ehttps://zhengyang.wang/add-copyright-notice\u003c/a\u003e\u003c/li\u003e \u003cli style=\"padding-top:0.5em;\"\u003e版权声明：自由转载-非商用-非衍生-保持署名（\u003ca href=\"http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh\" target=\"_blank\"\u003e创意共享3.0许可证\u003c/a\u003e）\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e 于是，便有了下面的效果 文档信息\r本文作者：正阳\r本文链接：https://zhengyang.wang/add-copyright-notice\r版权声明：自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）\r\r","date":"2022-02-14","objectID":"/2022/02/add-copyright-notice/:0:0","tags":["Hugo","Hugo配置"],"title":"文章内容增加版权声明","uri":"/2022/02/add-copyright-notice/"},{"categories":["患者招募"],"content":"这一篇记录了针对乙肝患者的乙肝五项，如何区分大三阳和小三阳。 去百度学习一番，整理如下： 序号 项目名称 结果 参考值 1 乙肝肺炎表面抗原[HBsAg] 阳性+ 阴性 2 乙肝肺炎表面抗体[HBsAb] 阴性- 阴性 3 乙型肝炎E抗原[HBeAg] 阴性- 阴性 4 乙型肝炎E抗体[HBeAb] 阳性+ 阴性 5 乙型肝炎核心抗体[HBcAb] 阳性+ 阴性 第1、3、5项呈阳性，其余为阴性，俗称大三阳 第1、4、5项呈阳性，其余为阴性，俗称小三阳 ","date":"2022-02-09","objectID":"/2022/02/hbv-respectively/:0:0","tags":["HBV","乙肝项目","临床试验"],"title":"如何区分大小三阳？","uri":"/2022/02/hbv-respectively/"},{"categories":["健康"],"content":"这是一份来自默沙东的健康手册。 正值辞旧迎新之际，祝大家新年快乐，虎年大吉！  \r\r 新的一年就要开始了，我们又要回到工作岗位继续奋斗了 身体是革命的本钱，刚好这两天浏览到默沙东出品的健康手册，从饮食、睡眠、卫生等多方面给出指导建议，确实是精品！分享一下 饮食和营养 少吃（是的，这对你有意义），特别是少糖，简单的碳水化合物、反式脂肪和饱和脂肪。 多吃水果、蔬菜和粗粮。 改变你的饮食习惯。 如果你的病情需要特殊饮食，请遵循它。 维生素及补充剂 如果你正在母乳喂养婴儿，请服用维生素D；如果使用奶瓶喂养宝宝，请使用含铁的配方。 如果你在50岁以上，请服用钙片和维生素D。 如果你是孕妇（或正在考虑怀孕），请服用产前维生素。 物质使用 请勿吸烟（如果你吸烟，请勿在床上吸烟）。 仅适度饮酒（如果对你很难，请勿饮酒）。 不要服用无意治疗疾病的任何药物。 运动和睡眠 你的年龄和病情（最好有乐趣）适合做30到60分钟有结构的锻炼（有氧和有阻力锻炼），并且每周至少3次。 多走动，上下楼梯。 尽可能保持规律的睡眠时间表。 感染 饮食和烹饪前要洗手。 恰当储存、准备和烹制食品（特别是肉类）。 只饮用清洁或处理过的水。 进行安全的性行为。 用肥皂和水清洗轻伤，并包扎伤口。 当可能接触蚊子或蜱虫时，使用恰当的衣服和驱蚊剂。 不要使用静脉注射毒品，如果你这样做，也不要共用针具。 受伤和一般的安全 带上安全带；如果你是一个孩子，使用汽车安全座椅。 骑自行车或摩托车时戴上头盔，并使用其它防护装备进行恰当的活动（娱乐或职业）。 存储和安全处理枪械。 遵守适用于你的工作或休闲活动的公认安全程序。 不要在酒后、过于困倦或分心时操作车辆或动力设备。 横穿或进入街道、变道或并道之前观察情况。 划船时穿好救生衣，不要在浅水区跳水，并学习游泳。 在家中使用工作正常的烟雾和一氧化碳探测器。 心理健康 待人如待己。 为自己的行为负责；还要对自己之外的人或事负责。 结交朋友，保持友善。 更可取的行为：不要对其他人说坏话，或说与他人有关的坏话。 实践心态放松的技巧（例如冥想或祈祷）。 不要为小事担心，并知道什么是小事。 在逆境下改变自己所能改变的，接受不能改变的，尝试知道不同。 尽力做好某件事（但不要获得超过自己能力范围的结果）。 做一些对家庭和社区有益的事情。 要知道你会死去（没错，你会死亡），你会体验到痛苦和损失。 卫生保健 一天至少刷两次牙。 定期看牙医进行清洗和检查。 定期看保健医生进行适合于年龄和性别的筛查（血压、葡萄糖和脂质水平；子宫颈抹片检查、乳房X-线照片和结肠癌筛查；产前筛查）和预防接种。 小心日晒，涂抹防晒霜。 如果感觉身体或精神上不对，请看恰当的从业者：如果你信任他们，请按他们的建议去做；如果不信任他们，或者他们说的话似乎好到让人无法相信的地步，或者无任何意义，千万不要忽视这个问题，而是获得其它意见。 另外，还有一份自我评估工具也值得推荐，包含了BMI计算器、腰臀比计算器、吸烟成本计算器等等 *以上内容来源于默沙东诊疗手册 ","date":"2022-02-02","objectID":"/2022/02/a-health-manual/:0:0","tags":["健康","默沙东"],"title":"健康手册","uri":"/2022/02/a-health-manual/"},{"categories":["记录"],"content":"记录了我的一加手机在关闭双开应用功能后如何抹除应用双开存储空间。 应用双开是在手机文件系统内单独切出一块空间来安置双开的应用，这样就有了主存储空间和应用双开存储空间 一般手机在停止使用应用双开后，这块独立出来的空间会随着被删除，但我的一加5T并没有 \r\r双开微信，只是临时用一下，用完卸载后这个所谓的应用双开存储空间却没有被删除，而且系统上也没有提供删除的功能，只能自己想办法给清理掉 经过基友的指点，于是就有了下面的操作 刚好手边有两部手机，利用其中一部adb connect到我的一加手机，完成删除。命令大概如下： //列出设备 adb devices //连接设备 adb connect 192.168.0.129:5555 //获取user列表 adb shell pm list users //删除 user 999 adb shell pm remove-user 999 重启，问题解决！ 我的是已经清理过的，所以这里看不到 D:\\env\\adb\u003eadb shell pm list users Users: UserInfo{0:机主:13} running UserInfo{10:新用户:10} UserInfo{11:访客:14} 以上 ","date":"2021-12-17","objectID":"/2021/12/oneplus-removes-dual-storage/:0:0","tags":["手机","记录"],"title":"OnePlus去除应用双开存储空间","uri":"/2021/12/oneplus-removes-dual-storage/"},{"categories":["试药"],"content":"一篇来自网友的试药自述. 以下内容来源于知乎，作者火枪手的枪，稍经修整 问：三甲医院试药招聘兼职，到底靠谱吗？ 看到很多此类招聘兼职的信息，报酬很高，不知有着怎样的风险～ 希望有人可以帮我解答 知乎用户 @火枪手的枪 写下了这样回答，比较中肯 靠谱 不废话，先讲讲本人的一次试药经历，再详细说试药行业的待遇，风险，注意事项等 我是2019年11月份参加的 地点：安徽医科大学第二附属医院 历时：体检1天，等待体检结果1天，入院前等待1天，入院7天，共10天 误工费：5400元 期间花费：车票➕等待期间吃住≈400元，在医院入住期间吃住是免费的。吃饭有人监督，必须吃完 合计收入：5000元 下面讲一讲整个试药的流程 第1天：下午14：00达到医院，等待体检，先测量了身高、体重、血压 第2天：早上8：00开始，抽血，尿检，心电图，胸片，生命体征等，大概12点结束 第3天：等体检通知 第4天：办理入住手续，告知注意事项，签知情协议 [注：关于知情协议签署部分，公众号文章有说明] 第5天：住院休息，住院期间必须按照规定时间吃饭，休息，期间不能抽烟，不能外出，可随时退出，如果提前退出只能拿一部分误工费 第6天：第一次给药。药量一片约5毫克，吃完前抽血，吃完后要多次抽血（为避免多次扎针留有留置针），一共抽血约90毫升，相当于献血的1/4 第7-8天：休息，按时吃饭，医院的休息室开放，有电脑可以上网，电视，棋牌 第9天：第二次试药，和第一次一样 第10天：出院前体检。拿到误工费5400元，现金 这期间一共吃了2片药，一共10毫克。没有不良反应，同组一共32人，无一人有不良反应 小插曲：其中一人因牙疼提前退出，只拿到了2700元误工费 以上是11月初的一次试药经历 下面说说试药行业： 一、首先，试药是不要交任何费用的，如果有中介收费，那就是骗子，误工费都是医药公司给医院，医院给试药人员 中介的中介费都是医药公司给的。再次提醒，交费的都是骗子，一毛钱都不用交！！！体检，在医院期间的吃住都是免费的 二、试药的医学术语是临床试药 所有临床试药必须国家授权，经医药伦理委员会的考核和批准，才能在有资质的三甲医院开展。 正常人服药后，在一定时间内会代谢出去，一般认为3个月可以完全代谢出去，毕竟剂量很小（自己想象，2片感冒药的剂量） 国家规定每个人每隔3个月才能试药一次，身份证全国联网，可以查到的。当然，有些专职试药的，会参加不联网项目，这个不建议 三、体检筛选流程 常规项目身高，体重，血压，血检，尿检，心电图，有些会增加胸片，烟检（至少要戒烟1个月吧）住院期间不能抽烟 体检前一个星期不能剧烈运动，吃药，经常熬夜，住院前两天最好不要喝咖啡，茶，饮酒等 四、大家最关心的危害 一般来说大部分项目危害比较小，毕竟剂量很小，知情协议书上有伦理委员会的电话，随时可以联系 试药期间可以随时退出，无强制 但是有些项目不是特别缺钱的一般不建议参加：注射类的，精神类药物的 降压药，减肥药，止痛药等这些一般可放心参加，一般不会有不良反应，还是那句话，剂量很小 五、大家关心的报酬 试药的报酬叫误工费，直接由医院发放，一般情况下都是试药结束2周内打到银行卡内 有些会试药结束当天发放现金（如安徽医科大学第二附属医院的项目基本都是当天发放），也有很少会1个月发放的 只要是参加的正规项目，误工费是会按时发放的，这个可以放心。误工费一般几千到几万不等（要看项目的） 六、试药报名渠道 一般是通过中介，代理。提醒，所有收费的中介，代理都是骗子 最后，参加试药的年轻人比较多，普通上班族，大学生等，毕竟报酬比较高 ","date":"2021-01-06","objectID":"/2021/01/reagent-experience/:0:0","tags":["试药","临床试验"],"title":"来自一位网友的试药经历","uri":"/2021/01/reagent-experience/"},{"categories":["试药"],"content":"汇总了在参加试药过程中会经常遇到的一些问题. 1. 新药是如何上市的呢？ 新药要经过漫长、严谨的研发过程，才能上市为患者服务，其中试药是一个重要且不可或缺的环节 我们知道，新药在进入临床试验前，已在动物身上完成了试验，然后才进行临床试验或者生物等效性试验 [药物临床等效试验是指生物效应的一致性，以药动力学为参数指标，根据国内已上市的药品与进口药进行比较，其活性吸收程度和速度有无统计学差异的人体试验，试验对象一般为为健康志愿者] 而试药则是通过人体（病人或健康志愿者）进行药物的系统性研究，观察疗效，了解有无毒副作用，副作用有多大等等情况 临床试验一般要经过Ⅰ、Ⅱ、Ⅲ、Ⅳ期。Ⅰ期试验在健康人群中间进行，其他三期都在病人中间选择。健康人群参加的都是I期临床试验 2. 什么人可以参加试药呢？ 试药并不是谁都有资格参加的，年龄一般限制在18到60周岁，无不良嗜好，身体健康等 通过体检来确定是否合适参加项目。在中国大陆，参与I期试药的人群主要有三类，一是学生人群，二是医护人员，三是无业者等 3. 体检是免费的吗？ 体检是完全免费的，每位参加体检的志愿者我们都会发放一定的路费补贴，有时为了方便管理，需要每位志愿者提前一天入住医院安排免费酒店，第二天一早开始体检。具体以项目公布为准 4. 体检主要检查些什么？ 一般都是一些常规体检，包括身高体重、血常规、尿筛、心电图、胸透、生命体征等 5. 这个报酬那么高，会不会对我们身体造成伤害？ 首先志愿者是完全无偿的，这些报酬是医院处于人性化考虑根据当地工资标准给予参加试药的志愿者，多为补偿费或营养费 补偿一般按500-600人民币/天计算的，具体要以药企合同签署为准。每一期的试验药物我们都会评估风险，基本对身体无影响我们才会接洽，所有的试验项目必须报伦理委员会批准后开展，必须符合赫尔辛基宣言，符合GCP的原则 6. 医院有给试药志愿者购买保险吗？ 医院会为每位入选的志愿者购买全程商业保险 7. 报名志愿者需要提交哪些信息？ 姓名、电话、身份证号码（体检挂号使用），体检时请带上自己的身份证原件 8. 参加完本期实验，可以继续参加下一期吗？ 不可以，考虑到试药志愿者的健康因素，国家规定必须再隔三个月才能再参加下一次试验，此外还可能会产生抗药性，对实验结果造成误差 项目标注为全国联网的试验为全国范围内识别身份证系统的临床试验，一个身份证信息参加全国联网的试验三个月内只能做一次 9. 参加试药期间食宿如何解决？ 试药期间的食宿由医院全包，提供WIFI、热水、电脑、象棋，杂志等。志愿者只需带上拖鞋，毛巾，牙具等基本生活用品就可以入住 10. 关于补贴发放(最关心的事之一)？ 补贴发放分为两种：一种为现金发放（少数医院采取这种方式），另一种是打卡（将补贴打到个人银行卡） 一般补贴发放，在试验完毕之后由医院在1-2个工作日内统一打到本人开户的银行卡账户，有特殊情况医院会提前告知！ 11. 知情同意是什么？ 知情同意，是在您决定是否成为志愿者前，需要清楚该研究的关键内容，您同意成为志愿者应该建立在了解研究流程及其对自身影响的基础之上 知情同意开始于研究人员向您解释研究的各种情况。研究人员将协助您阅读包括研究客观情况的《知情同意书》以便于您决定是否参加本次临床研究。 这些客观情况包括研究的详细信息，您可能经历的测试或者流程，导致的风险与利益，您作为志愿者的权益 12. 我中途想退出怎么办？ 任何人让您参加临床研究试验，您都有权利说“不”，即使参与的途中您也可以随时退出，请提前告知研究医生和我们，我们将帮助您了解任何试验中的情况。 *13. 什么是伦理审查委员会? 伦理审查委员会(IRB)是审查和批准人体研究的一群人，包括医疗人员、科学家、法律顾问和当地社区人员，IRB可以在研究之前和期间保护您的权益和福利。IRB确保任何风险尽可能小，IRB并不替你做决定，但是在研究进行期间持续审查以确保您的权益受到保护 ","date":"2021-01-01","objectID":"/2021/01/summary-of-faqs/:0:0","tags":["试药","临床试验"],"title":"临床试药的常见问题汇总(一)","uri":"/2021/01/summary-of-faqs/"},{"categories":["Excel"],"content":"Excel中用LOOKUP提取字符串首部数值","date":"2020-10-28","objectID":"/2020/10/excel-lookup-string-extraction/","tags":["Excel","Lookup"],"title":"LOOKUP提取字符串首部数值","uri":"/2020/10/excel-lookup-string-extraction/"},{"categories":["Excel"],"content":"Excel中使用LOOKUP提取字符串首部数值。 如果要提取下面一串内容中首部的数字，要如何操作？ 99.9千克的狗熊最可爱  具体操作 分列 \r\r但是分列在大量数据格式不对称的情况下就失灵了  公式 \r\r公式的效果更好一些  ROW($1:$4) \r\r这个公式会生成一个常量数组 {1;2;3;4}，编辑栏会有变化 目的是为了方便LEFT在D2单元格中取值，为什么会是$1:$4？  -LEFT(D2,ROW($1:$4)) \r\rLEFT配合上ROW生成的常量数组，会分别取左边的前一个、前两个、前三个、前四个字符 加负号的目的，是对其进行减负运算，数值、文本型数值就直接变成0或负值，其他的不能转的就会变成错误值，最后即 {-9;-99;-99;-99.9} 这就是ROW的作用，当然这里用ROW($1:$3)也可以，而为什么是四个，因为要提取的这些内容中包含数字最多是四位 即6400  LOOKUP(1,-LEFT(D2,ROW($1:$4))) 即 LOOKUP(1,{-9;-99;-99;-99.9}) LOOKUP有这些特点： LOOKUP函数会忽略错误值 如果LOOKUP找不到要找的值，最终匹配小于或等于它的最大值(在以升序排列情况下) 没有排序的话，LOOKUP则总会认为后边的数字比前边的大，所以最终会认为最后的值是最大的，所以最后会匹配到最完整的带负号的数值 最后再将匹配到的数值做减负运算，就是我们想要的值，即 LOOKUP(1,-LEFT(D2,ROW($1:$4))) -LOOKUP(1,{-9;-99;-99;-99.9}) ","date":"2020-10-28","objectID":"/2020/10/excel-lookup-string-extraction/:0:0","tags":["Excel","Lookup"],"title":"LOOKUP提取字符串首部数值","uri":"/2020/10/excel-lookup-string-extraction/"},{"categories":["Excel"],"content":"罗列出Excel查找重复值的四种方法","date":"2020-10-21","objectID":"/2020/10/excel-find-duplicate-values/","tags":["Excel","CountIF"],"title":"Excel查找重复值","uri":"/2020/10/excel-find-duplicate-values/"},{"categories":["Excel"],"content":"Excel中，如何用多种不同的方法找出表中的重复数据？ 条件格式法 自Excel 2010开始就内设了标识重复项的功能 先选定一块区域，在开始→条件格式→突出显示单元格规则→重复值，就可以把重复数据及所在单元格标记出来 \r\r注意\r\r该方法只可以定位重复的数据而无法筛选出来\r\r 高级筛选法 在数据→筛选→高级→ 高级筛选 \r\r方式 根据自己需要选择 列表区域 即需要查找的内容 复制到 选择筛选结果存放位置 函数法 COUNTIF函数 用于统计满足某个条件的单元格的数量，因此可以用来快速查找重复数据 \r\r注意\r\r计算条件，可以是数字，表达式或文本，如\"London\"，21，\"\u003e55\"等\r\r \r\r图中使用的都是COUNTIF函数，两种不同的用法 标记重复值，COUNTIF会在绝对引用的单元格区域中，对所有数据出现的次数进行计数，所以AF6831903查找后的结果为3，即出现了三次，这种结果和前面的条件格式法结果类似，标记出哪些是重复项，并计算了重复多少次 标记第n次重复项，公式每次选定的区域都不相同，数据每出现一次都会计算当前区域出现的次数，如AF6831903后结果为1，2，3即表示第一次出现，第二次出现，第三次出现… 数据透视法 用数据透视表也可以快速地查找出重复项 \r\r以上 ","date":"2020-10-21","objectID":"/2020/10/excel-find-duplicate-values/:0:0","tags":["Excel","CountIF"],"title":"Excel查找重复值","uri":"/2020/10/excel-find-duplicate-values/"},{"categories":["乐趣"],"content":"古人为屁赋诗...","date":"2020-09-07","objectID":"/2020/09/stinky-fart/","tags":["阅读","笔记"],"title":"臭屁赋","uri":"/2020/09/stinky-fart/"},{"categories":["乐趣"],"content":"为臭屁所赋的诗词。 大二在图书馆偶然翻到了李百川[清]先生的一本书，名为《路野仙踪》。内容大概是明嘉靖年间，科举及第未仕的冷于冰看破官场腐败又不肯攀附权贵严嵩，出家遁入玄门。后寻仙问道，拜于一高人门下，学得大成后下山解救涂炭生灵。像一部古人看的玄幻小说。 印象比较深刻的是主人公于冰寻仙问道之路，遇到一为屁做赋的书生，读完后笑出了猪叫声 《臭屁行》\r屁也屁也何由名？为其有味而无形。臭人臭己凶无极，触之鼻端难为情。我尝静中溯屁源，本于一气寄丹田；清者上升浊者降，积怒而出始鸣焉。君不见妇人之屁鬼如鼠，小大由之皆半吐；只缘廉耻胜于金，以故其音多叫苦。又不见壮士之屁猛若牛，惊弦脱兔势难留；山崩峡倒粪花流，十人相对九人愁。吁嗟臭屁谁作俑，祸延坐客宜三省。果能改过不号啕，也是文章教尔曹，管叫天子重英豪！若必宣泄无底止，此亦妄人也已矣。不啻若自其口出，予惟掩鼻而避耳。呜呼！不毛之地腥且膻，何事时人爱少年？请君咀嚼其肚馔，须知不值半文钱！ 此开辟以来未有之奇题也！见此屁诗，便目荡神怡如此，若读其屁赋，又当何如？ 《臭屁赋》\r今夫流恶千古，书无名者，亦椎此臭屈而已矣！视之弗见，听之则闻，多呼少吸，有吐无吞；作本源于脏腑，仍作祟于幽门。其为气也，影不及形，尘不暇起，脱然而出，清然而止；壮一室之妖氛，泄五谷之败味，沉檀失其缤纷，兰麝减其馥郁。其为声也，非金非石，非丝非竹；或裂帛而振响，或连珠而叠出，或哑哑而细语，或咄咄而疾呼；或为唏，或为咦，为呢喃，为叱咤，为禽啼兽吼，百怪之奇音。在施之者，幸智巧之有余；而受之者，笑廉耻之不足。其为物也，如兽之獍，如鸟之鸱，如黍稷之稂莠，如草木之荆棘，拟以罪而罪无可拟，施以刑而刑无可施。其为害也，惊心振耳，污商彝夏鼎之光；绣需锦服，掩其灿烂；珠宫贝阙，晦其琳琅；凡男女老幼中斯毒，莫不奔走辟易，呕吐狼藉；所谓臭人臭已，而无一不两败俱伤者也。呜呼！天地为炉兮，造化为工；阴阳为炭兮，万物为铜。乃如之人兮，亦效其陶熔；以心为水火兮，以肝为柴薪：以脾土为转运兮，以谷道为流通。酿此极不堪兮，使吾掩鼻而终莫测其始终。已矣乎！蛟窟数寻，可覆之以一练，雄关百仞，可封之以一丸；惟此孔窍，实无物之可填。虽有龙阳豪士深入不毛，然止能塞其片刻之吹嘘，而不能杜其终日之呜咽。宜其坏风俗，轻礼义，乱先王之雅乐，失君子之威仪，侮其所不当侮之人，而放于所不直放之时，又谁能禁其耸肩掇臀，倒悬而逆施哉？予小子继苏，学宗颜孟，德并朱程，接斯文于未坠，幸大道之将行：既心焉乎圣贤，自见异而必攻；援命弟子，并告家兄，削竹为挺，截木为钉，挺其既往，钉其将荫；勿避蒸熏而返旆，勿惊咆哮而休兵。自古皆有死，誓与此臭屁不共戴日月而同生！ 可谓是畅所欲言，通篇精义，层出其妙！ ","date":"2020-09-07","objectID":"/2020/09/stinky-fart/:0:0","tags":["阅读","笔记"],"title":"臭屁赋","uri":"/2020/09/stinky-fart/"},{"categories":["Windows"],"content":"快速的将当前目录下所有文件的文件名整理到一表格内","date":"2020-08-31","objectID":"/2020/08/dir-get-foldername/","tags":["Windows","DIR命令"],"title":"DIR批量获取文件名","uri":"/2020/08/dir-get-foldername/"},{"categories":["Windows"],"content":"快速的将当前目录下所有文件的文件名整理到一表格内。 Windows的DIR命令类似于Linux的ls，用来查看目录下文件 DIR不带参数默认返回的内容包括该文件的Mode、LastWriteTime、Length和Name属性，这里我只需要获取它的Name即可 DIR *.* /B \u003e fileName.csv // 翻译：在当前目录下遍历所有文件并将文件名(含后缀)重定向至`fileName.csv`文件 // DIR是命令 // \"*.*\" 当前文件夹下所有的文件 // \"/B\" 我只想获取文件名 // \"\u003e fileName.csv\" 将返回的内容输出重定向至fileName.csv文件；CSV是通用文件，记事本和Excel都可以打开 DIR *.* /B /A-D \u003e fileName.csv //只获取目录下文件的命名，不包含文件夹 要用到的命令DIR，下面是关于该命令的帮助文档 DIR [drive:][path][filename] [/A[[:]attributes]] [/B] [/C] [/D] [/L] [/N] [/O[[:]sortorder]] [/P] [/Q] [/R] [/S] [/T[[:]timefield]] [/W] [/X] [/4] [drive:][path][filename] 指定要列出的驱动器、目录和/或文件。 /A 显示具有指定属性的文件。 属性 D 目录 R 只读文件 H 隐藏文件 A 准备存档的文件 S 系统文件 I 无内容索引文件 L 重新分析点 O 脱机文件 - 表示“否”的前缀 /B 使用空格式(没有标题信息或摘要)。 /C 在文件大小中显示千位数分隔符。这是默认值。用 /-C 来 禁用分隔符显示。 /D 跟宽式相同，但文件是按栏分类列出的。 /L 用小写。 /N 新的长列表格式，其中文件名在最右边。 /O 用分类顺序列出文件。 排列顺序 N 按名称(字母顺序) S 按大小(从小到大) E 按扩展名(字母顺序) D 按日期/时间(从先到后) G 组目录优先 - 反转顺序的前缀 /P 在每个信息屏幕后暂停。 /Q 显示文件所有者。 /R 显示文件的备用数据流。 /S 显示指定目录和所有子目录中的文件。 /T 控制显示或用来分类的时间字符域 时间段 C 创建时间 A 上次访问时间 W 上次写入的时间 /W 用宽列表格式。 /X 显示为非 8dot3 文件名产生的短名称。格式是 /N 的格式， 短名称插在长名称前面。如果没有短名称，在其位置则 显示空白。 /4 以四位数字显示年份 ","date":"2020-08-31","objectID":"/2020/08/dir-get-foldername/:0:0","tags":["Windows","DIR命令"],"title":"DIR批量获取文件名","uri":"/2020/08/dir-get-foldername/"},{"categories":["Linux"],"content":"Linux下anaconda的安装与常规使用","date":"2020-03-17","objectID":"/2020/03/linux-install-anaconda/","tags":["Linux","anaconda"],"title":"Linux下anaconda的安装","uri":"/2020/03/linux-install-anaconda/"},{"categories":["Linux"],"content":"记录Linux下anaconda的安装与简单使用。 ","date":"2020-03-17","objectID":"/2020/03/linux-install-anaconda/:0:0","tags":["Linux","anaconda"],"title":"Linux下anaconda的安装","uri":"/2020/03/linux-install-anaconda/"},{"categories":["Linux"],"content":"anaconda的安装 下载 # 下载安装文件;请自行选择所需版本 wget -c https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh 安装 # 开始安装，中途可能会需要输入 yes/no 或默认按回车 bash Anaconda3-2020.02-Linux-x86_64.sh 配置环境变量 # 一般会默认将Anaconda安装到PATH，如果安装中出现了问题或该选项选择了NO，就需要对环境变量进行配置 # 这里修改的是/root目录下的.bashrc，即配置的是全局变量 # 打开该文件后如果有和下面类似字样，那么就不需要配置了。 # \u003e\u003e\u003e conda initialize \u003e\u003e\u003e # !! Contents within this block are managed by 'conda init' !! __conda_setup=\"$('/root/anaconda3/bin/conda' 'shell.bash' 'hook' 2\u003e /dev/null)\" if [ $? -eq 0 ]; then eval \"$__conda_setup\" else if [ -f \"/root/anaconda3/etc/profile.d/conda.sh\" ]; then . \"/root/anaconda3/etc/profile.d/conda.sh\" else export PATH=\"/root/anaconda3/bin:$PATH\" fi fi unset __conda_setup # \u003c\u003c\u003c conda initialize \u003c\u003c\u003c # 如果没有类似以上内容则需要配置，在.bashrc中添加 vi ~/.bashrc # 在文件最后加上一行，路径为所安装anaconda下的bin目录 # \u003e\u003e\u003e conda initialize \u003e\u003e\u003e export PATH=\"/root/anaconda3/bin:$PATH\" # \u003c\u003c\u003c conda initialize \u003c\u003c\u003c 刷新 # 修改文件./bashrc之后无法立即生效，需要source一下 source ~/.bashrc # 验证是否安装成功 conda --version \u003e\u003econda 4.8.2 # 安装成功 ","date":"2020-03-17","objectID":"/2020/03/linux-install-anaconda/:1:0","tags":["Linux","anaconda"],"title":"Linux下anaconda的安装","uri":"/2020/03/linux-install-anaconda/"},{"categories":["Linux"],"content":"anaconda的使用 创建 # 后面的python可以先不要，创建好虚拟环境后再单独安装 conda create -n your_env_name python=3.6 查看 # 看到创建好了的虚拟环境 conda env list 激活 # windows激活虚拟环境可以不用加前面的conda, CentOS需要加上 conda activate your_env_name 退出 conda deactivate 关闭开机自动进入base虚拟环境 # 环境建好后下次开机发现每次打开终端都会自动激活base虚拟环境。虽然没什么影响，但是很不爽 conda config --set auto_activate_base false # 若需要设置为自动激活，改为true就好 查看已安装的包 conda list ","date":"2020-03-17","objectID":"/2020/03/linux-install-anaconda/:2:0","tags":["Linux","anaconda"],"title":"Linux下anaconda的安装","uri":"/2020/03/linux-install-anaconda/"},{"categories":["乐趣"],"content":"破窑赋","date":"2019-11-28","objectID":"/2019/11/broken-kiln/","tags":["阅读","笔记"],"title":"破窑赋","uri":"/2019/11/broken-kiln/"},{"categories":["乐趣"],"content":"【北宋】吕蒙正 天有不测风云，人有旦夕祸福。 天有不测风云，人有旦夕祸福。蜈蚣百足，行不及蛇；雄鸡两翼，飞不过鸦。马有千里之程，无骑不能自往；人有冲天之志，非运不能自通。 盖闻：人生在世，富贵不能淫，贫贱不能移。文章盖世，孔子厄于陈邦；武略超群，太公钓于渭水。颜渊命短，殊非凶恶之徒；盗跖年长，岂是善良之辈。尧帝明圣，却生不肖之儿；瞽叟愚顽，反生大孝之子。张良原是布衣，萧何称谓县吏。晏子身无五尺，封作齐国宰相；孔明卧居草庐，能作蜀汉军师。楚霸虽雄，败于乌江自刎；汉王虽弱，竟有万里江山。李广有射虎之威，到老无封；冯唐有乘龙之才，一生不遇。韩信未遇之时，无一日三餐，及至遇行，腰悬三尺玉印，一旦时衰，死于阴人之手。 有先贫而后富，有老壮而少衰。满腹文章，白发竟然不中；才疏学浅，少年及第登科。深院宫娥，运退反为妓妾；风流妓女，时来配作夫人。 青春美女，却招愚蠢之夫；俊秀郎君，反配粗丑之妇。蛟龙未遇，潜水于鱼鳖之间；君子失时，拱手于小人之下。衣服虽破，常存仪礼之容；面带忧愁，每抱怀安之量。时遭不遇，只宜安贫守份；心若不欺，必然扬眉吐气。初贫君子，天然骨骼生成；乍富小人，不脱贫寒肌体。 天不得时，日月无光；地不得时，草木不生；水不得时，风浪不平；人不得时，利运不通。注福注禄，命里已安排定，富贵谁不欲？人若不依根基八字，岂能为卿为相？ 吾昔寓居洛阳，朝求僧餐，暮宿破窖，思衣不可遮其体，思食不可济其饥，上人憎，下人厌，人道我贱，非我不弃也。今居朝堂，官至极品，位置三公，身虽鞠躬于一人之下，而列职于千万人之上，有挞百僚之杖，有斩鄙吝之剑，思衣而有罗锦千箱，思食而有珍馐百味，出则壮士执鞭，入则佳人捧觞，上人宠，下人拥。人道我贵，非我之能也，此乃时也、运也、命也。 嗟呼！人生在世，富贵不可尽用，贫贱不可自欺，听由天地循环，周而复始焉。 ","date":"2019-11-28","objectID":"/2019/11/broken-kiln/:0:0","tags":["阅读","笔记"],"title":"破窑赋","uri":"/2019/11/broken-kiln/"},{"categories":null,"content":" \rAbout Me 东坡云：“事如春梦了无痕”，苟不记之笔墨，未免有辜彼苍之厚。以其所记者杂，故曰《杂记》。平时也有随便写写的习惯，但较为杂乱分散，不便于检索和管理，于是便有了本站 毕业于二流本科院校，后扎根成都，奋斗在临床招募行业，第一次尝试创业 … 随便写写  Contact Email: zhengyang.one@foxmail.com 个人微信：zhengyangI_I 微信公众号：愚人杂记  History 于2022年建站，基于搭建，托管在 ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"}]